title,heading,content,tokens
What is Choreo?,What is Choreo?,"Today, with the growth of the global API ecosystem, APIs have become an essential part of modern engineering. Therefore, it has become necessary for organizations to participate in this global API supply chain by consuming and producing APIs. The adoption of cloud and microservices-based distributed architecture has also become increasingly significant, causing more and more organizations to rapidly evolve and look for innovative ways to build their digital business ecosystem. This has led to the need for a state-of-the-art iPaaS that can address the complex challenges that organizations face when connecting applications, systems, and data to build integrations and expose those integrated services to internal and external consumers in a future-proof manner. Choreo, a versatile and comprehensive platform for low-code, cloud-native engineering, provides the following advantages:
- An AI-assisted, low-code application development environment that can help developers build enterprise-class integrations faster while ensuring best practices and secure coding guidelines. 
- Developers can switch between a visual low-code and typical code environment and select the experience that best supports a given situation.
- Even without expert-level coding skills, Choreo's low-code environment empowers developers to build applications with ease. It also provides capabilities to collaborate and improve these applications as needed.
- Its low-code application development platform auto-generates editable and version-controlled code and maintains it in GitHub. This makes it possible to apply the engineering rigor required for enterprise applications on low-code.
- API management capabilities to develop APIs and get them to production. Choreo’s API Publisher Portal allows API developers to design, publish, and manage the lifecycle of APIs whereas the API Developer Portal allows consumers to consume APIs.
- Realistic DevOps with versions, environments, CI/CD pipelines, and automation tests.
- Deep observability to trace your executions from the code statement level to the machine on which those run.",396
Quick Start Guide,Quick Start Guide,"Choreo is a cloud-native low-code engineering platform that allows you to create APIs, API Proxies, triggers, and scheduled tasks to implement your integration solution. 
!!! tip
        Take a look at the Choreo playlist(https://youtube.com/playlist?list=PLdjnDnxI3SA85otCxxvyGBJp5Bc19NpaS) for video tutorials that guide you through the steps to create, publish, deploy, consume, and observe your APIs. 
This quick start guide walks you through the steps to create, develop, publish, deploy, and invoke a REST API using Choreo.",147
Quick Start Guide,Create your first REST API,"### Step 1: Create a REST API
1. Sign in to the Choreo Console at https://console.choreo.dev. You will view the **Home** page.
2. In the **Create from a Sample** section, click **Echo Service**. Choreo starts creating an API using the template in this sample. Once Choreo completes adding the API, you can see the overview of this API.
 
### Step 2: Deploy the REST API 
Choreo maintains two environments by default: development and production. Let's deploy the API to the development environment.
1. Click **Deploy** in the left navigation menu. 
2. Go to the **Build Area** card and click **Build and Deploy**. This deploys the API to the development environment to make it invokable. 

### Step 3: Test the REST API 
To test the REST API, follow these sub-steps:
1. Click **Test** in the left pane.
2. Expand the **POST** method with the **/** resource path. 
3. Click **Try it out**.
4. Add a meaningful string as the request body. For example, `Welcome to Choreo`.
5. Click **Execute**. You'll see the string you entered in step 4 above returned as the server response.",288
Quick Start Guide,Implement the business logic,"Developing an API involves writing the business logic for it. APIs often need to integrate with third-party systems to create a comprehensive integration solution. With Choreo, you can create your integration solution easily by implementing the business logic using its low-code editor, pro-code editor, or both.

### Step 1: Develop in low-code
Follow this procedure to further develop the API by adding a new resource and simple business logic:
1. Click **Overview** in the left navigation menu.
2. Click **Edit Code**. 
    !!! info
        The Web Editor can take some time to open if you are a first-time user.
3. Click **+** below the low-code diagram to add a new resource and configure it as follows: 
**HTTP Method** | `GET`
**Resource Path** | `personalizedMessage`
**Return Type** | `string | error`
4. Click **+ Add Parameter** to add a query parameter.  Enter the following values to get a name as input:
**Type** | `string` 
**Param Name** | `name`
5. Click **Save** to save the query parameter, and then click **Save** again to save the resource.
6. In the low-code diagram, click **+** after **Start**. In the **Add Constructs** pane, click **Variable**.
7. Update the given variable statement syntax (i.e., **`var variable = <add-expression>`**) to generate a personalized message by following these steps:
    1. To generate the message in string format, click **`var`**, and click **string**.
    2. Double-click **`variable`** which is the default variable name to edit it. Enter `message` as the new variable name.
    3. To generate the personalized message, double-click **`<add-expression>`** and enter the following expression:
        ```
         ""Hello ""+ name
        ```
        Now the variable statement is updated as follows:
        ```
        string message = ""Hello ""+ name;
        ```
8. Click **Save**.
9. To return the personalized message, click **+** below the variable you created and click **Return**. In the **Return** pane, the return statement syntax is displayed as **`return <add-expression>`**. Click **`<add-expression`**, and click **message** in the list of suggestions that appear below the return statement syntax.   
10. Click **Save**.
!!!info
    You can click the **</>** icon on the top left corner of the editor if you want to work in the code view. Depending on your expertise, you can work in the low-code view or the pro-code view. You can also work on both views simultaneously.

### Step 2: Run and test the REST API
1. Click the menu icon for the listener construct and then click **Run**.
    A terminal opens with logs that indicate the status of the REST API. If you updated the REST API as instructed above, you will see the following log:
    ```
    Running executable
    ```
2. To invoke the REST API, click the menu icon for the listener construct and then click **Try it**. This opens the Swagger view with details of your REST API.
3. Expand the GET resource and click **Try it out**.
4. In the **name** field, enter any value (for example, `Alice`).
5. Click **Execute**. The Swagger view displays the response under **Response Body**.

### Step 3: Commit changes to GitHub
Choreo maintains source code in a private GitHub repository. When you create a component, Choreo creates it in the private GitHub repository associated with your account. Therefore, you must commit and push your changes if you want to change the API Implementation.
Follow this procedure to commit and push your changes to GitHub.
1. On the bottom bar of the editor, click **Sync with Choreo upstream**. Alternatively, you can click source control on the left pane or click **Sync changes with Choreo** in the pop-up displayed at the bottom right corner. 
2. Click **Sync my changes with Choreo** in the window displayed. 
3. Enter a meaningful commit message and click **✓** on the toolbar. This commits the changes to the locally cloned copy of your private GitHub repository. Select Yes in the message that appears to specify that you need the changes to be staged.
4. On the top toolbar, click **...** and then click **Push**. Click **OK** in the message that appears to confirm that you want to push the changes. This pushes the local changes to your private GitHub repository.
",1111
Quick Start Guide,Manage your REST API,"Choreo provides full API management capabilities so that you can manage your REST API lifecycle, apply security, apply rate-limiting policies, configure usage plans, and add documentation.

### Step 1: Publish the API
Follow this procedure to publish the API to the API Developer Portal so that external consumers can view and consume the API:
1. Click **Manage** in the left pane.
2. On the **Lifecycle Management** page, click **Publish**.
3. Click **Go to Devportal**. You will see the published API.

### Step 2: Invoke the API 
Follow this procedure to invoke the REST API via the API Developer Portal:
1. Click **Credentials** in the left pane of the API Developer Portal.
2. Click **Generate Credentials**. Choreo creates credentials for an internal application and subscribes this API to that internal application.
3. Click **Generate Access Token**, copy the generated access token, and click **Close**.
4. Click **Try Out** in the left pane. 
5. Paste the copied access token in the **Access Token** field.
6. Click the `GET` resource you added to expand it.
7. Click **Try it out** and enter a name for the query parameter.
8. Click **Execute**. You'll see the personalized message as the response from the API.",306
Get Started with Choreo,Get Started with Choreo,"Choreo is a full lifecycle cloud-native developer platform that enables your developers to create, deploy, and run new digital components like APIs, microservices, and automations in serverless mode on any Kubernetes cluster.
This guide walks you through the following:
- Developing, deploying, testing, and publishing a REST API.
- Consuming the published REST API via an external application.
- Releasing a new version of the REST API with added functionality.
Let's consider a use case where a web application developer designs an application that allows you to maintain reading lists. A user can create a private reading list by adding books. The user can also view and delete them when required. A Choreo developer develops a REST API for this web application to consume. The two developers will create two versions of the solution in two iterations. The second version of the application will add data persistence as a new feature.
",192
Get Started with Choreo,Prerequisites,"Before you try out this guide, complete the following:
1. Create a GitHub repository to save the REST API implementation. For this guide, you can fork https://github.com/wso2/choreo-examples/tree/version-1.
2. If you are logging in to Choreo Console for the first time, create an organization as follows:
    1. In https://wso2.com/choreo/ click **Try Choreo Now**.
    2. Sign in to Choreo using your Google, GitHub, or Microsoft account.
    3. Enter a unique organization name. For example, `Stark Industries`.
    4. Read and accept the privacy policy and terms of use before you proceed.
    5. Click **Create** to add the new organization.
    You will be viewing the **Home** page of the Choreo Console.
3. Create a new project as follows:
    1. On the **Home** page of the Choreo Console, click **+ Create Project**.
    2. Enter a unique name and a description for the project, and click **Create**.",264
Get Started with Choreo,Create and publish a REST API,"In this step, you are playing the role of the API developer. You will create and publish the REST API that the web application needs to consume.

### Step 1.1: Create the REST API
Let's create your first REST API.
1. On the **Home** page, click on the project you created.
2. Click **Create** in the  REST API card.
3. Enter a unique name and a description for the API. For example, you can enter the name and the description given below:
**Name**        | `readingList
**Description** | `Manages reading lists`
4. In the **Access Mode** field, leave the default selection (i.e., **External: API is publicly accessible**) unchanged so that users outside your organization can access your API.
5. Click **Next**.
6. To allow Choreo to connect to your GitHub account, click **Authorize with GitHub**.
7. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials, and select the private repository you created by forking https://github.com/wso2/choreo-examples/tree/version-1 to install the Choreo GitHub App (https://github.com/marketplace/choreo-apps).
    !!! info
         The **Choreo GitHub App** requires the following permissions:
         - Read and write access to code and pull requests.
         - Read access to issues and metadata.
         You can revoke access (https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/reviewing-your-authorized-integrations#reviewing-your-authorized-github-apps) if you do not want Choreo to have access to your GitHub account. However, write access is only used to send pull requests to a user repository. Choreo will not directly push any changes to a repository.
8. In the **Connect Repository** dialog box, enter the following information:
**GitHub Account**    | Your account
**GitHub Repository** | `**choreo-examples**`
**Branch**            | `**version-1**`
**Build Preset**      | Click **Ballerina** because you are creating the REST API from a Ballerina (https://ballerina.io/) project and Choreo needs to run a Ballerina build to build it.
**Path**              | `**reading-list-service**`
9. Click **Create** to initialize a REST API with the implementation from your GitHub repository. Your GitHub account opens on a web page displaying a pull request similar to the following:
10. Click **View Pull Request**.
11. Review and click **Merge pull request**, and then click **Confirm Merge**. When you merge the pull request, it adds the necessary metadata files to connect your GitHub repository to Choreo so that you can proceed to create the component.

###  Step 1.2: Deploy the REST API
For the REST API to be invokable, you need to deploy it. To deploy the REST API, follow the steps given below:
1. Navigate to the Choreo Console. You will be viewing an overview of the `readingList` REST API.
2. In the left pane, click **Deploy**, and then click **Configure & Deploy**.
    !!! info
        Automatic deployment is enabled for the REST API by default. You are required to carry out only the first deployment manually. When automatic deployment is enabled, your REST API is automatically deployed every time you push a commit to the GitHub repository in which its implementation resides. You can disable automatic deployment if required.
3. In the **Configure & Deploy** pane, click **Deploy** without entering a sandbox endpoint. 
    !!! info
        In this example, you are testing the REST API only in the Choreo Console and not in a sandbox environment. Therefore, you do not need to enter a sandbox endpoint.
    This deploys the API to the development environment.

### Step 1.3: Test the REST API
Let's test the `readingList` REST API via Choreo's Open API Console by following the steps given below:
1. Click **Test** in the left pane, and be sure that you are in the **OpenAPI Console** view. If not, click **OpenAPI Console** in the left pane.
2. Expand the **POST** method and click **Try it out**.
4. Update the request body so that the parameters have the values given below:
**author**    | `Bram Stoker`
**status**    | `to_read`
**title**     | `Dracula`
The request body should look as follows:

```json
    {
    ""author"": ""Bram Stoker"",
    ""status"": ""To Read"",
    ""title"": ""Dracula""
    }
```
5. Click **Execute**. Check the **Server Response** section. On successful invocation, you will receive the `200` HTTP code. Similarly, you can expand and try out the **GET** and **DELETE** methods.


### Step 1.4: Publish the REST API
Now that your API is tested, let's publish it and make it available for applications to consume.

#### Step 1.4.1: Update the CORS configuration
The application developer in this scenario calls the API from a different domain to Choreo (i.e., Vercel). By default, web browsers block these calls for security reasons. To enable the application to call the API, update the CORS configuration as follows:
1. In the left pane, click **Manage**.
2. Click **Settings**.
3. Under **API Settings** click **Edit**.
4. Toggle the **CORS Configuration** switch to enable the CORS configuration.
5. Select the **Access Control Allow Credentials** checkbox.
6. In the **Apply to Development** pane that opens on the right-hand side of the page, enter a meaningful message. Then click **Apply**.
7. Click **Save**.

#### Step 1.4.2: Publish the REST API
We are now ready to publish the REST API. To do so, follow the steps given below:
1. In the **Manage** tab, click **Lifecycle**.
2. Click **Publish** to publish the REST API to the Developer Portal. External applications can subscribe to the API via the Developer Portal.
3. To access the Developer Portal, click **Go to DevPortal**. The readingList REST API will open in the Developer Portal.",1567
Get Started with Choreo,Consume the REST API,"You have published the readingList REST API to the Developer Portal where application developers can find it and subscribe their applications to it. To consume the `readingList` REST API, let's create an application, subscribe it to the REST API, generate keys, and invoke the API.

### Step 2.1: Create an application
An application in the Developer Portal is a logical representation of a physical application such as a mobile app, web app, device, etc.
Let's create the application to consume the `readingList` REST API by following the steps given below:
1. In the top menu of the Developer Portal, click **Applications**.
2. Click **Create**.
3. Enter a name for the application (for example, `readingListApp` and click **Create**. Your Application will open on a separate page.

### Step 2.2: Subscribe to the API
To consume the REST API, the `readingListApp` application needs to subscribe to it. To subscribe your application to the API, follow the steps given below:
1. In the left navigation menu, click **Subscriptions**.
2. Click **Add APIs**.
3. Find your REST API and click **Add**.
Now your application has subscribed to the `readingList` REST API.


### Step 2.3: Deploy a Web application and invoke the REST API
At present, any user can invoke the `readingList` REST API via the `readingListApp` application (i.e., using its token) and update the reading list. However, if a user sends a request to retrieve the reading list, the response will also show entries by other users. To allow multiple users to use the application and maintain personal reading lists, you need a front-end application that allows each user to log in with a unique user ID.
In this step, let's deploy a pre-designed front-end application. This application is designed to personalize the readingList based on the user ID that it obtains from its identity provider. To enable the application to obtain the user ID, let's configure Asgardeo as the identity provider.

#### Step 2.3.1: Configure Asgardeo to integrate with your application
To generate the configurations required for end users to log in to the front-end application (for example, the access token, redirect URLs, etc.), let's create an application in Asgardeo by following the steps given below:
1. Access Asgardeo at https://console.asgardeo.io/ and log in with the same credentials with which you logged in to Choreo.
2. Click **Single-Page Application** to start adding a single-page application.
3. Enter a name for the single-page application and enter `https://localhost:5173` as the authorized redirect URL.
4. Click **Register**.
5. Click **Protocol** to open the **Protocol** tab, and make the following changes:
    1. In the **Authorized redirect URLs** field, enter `http://localhost:5173/`. Next, click the **Add** icon.
    2. Under **Access Token**, select **JWT** as the token type.
    3. Scroll down to the **ID Token** section and enter the following value in the **Audience** field.
        `https://sts.choreo.dev/oauth2/token`
         Click **Add URL** to save this value.
    4. Click **Update**.
7. Click **Quick Start**, and then click the **React** icon (because you will be using a pre-configured sample react front-end application). A separate page opens for your application with **Integrate Your Application** option selected by default.
    !!! info   
        Under this option, you will see some instructions to configure the application. Some of these steps are already completed for the pre-configured front-end application you will be using.
Next, you need to pass the configurations displayed on this page to your front-end application.

#### Step 2.3.2: Configure the front-end application
To configure the front-end application by defining the ports it needs to run on, adding the endpoint to the `readingList API`, etc., follow the steps given below:
1. Clone `version-1` branch in your fork of https://github.com/wso2/choreo-examples/tree/version-1.
2. Open the cloned repository using an IDE (for example Visual Studio Code), and make the following changes.
    1. Navigate to the `choreo-reading-list-application-example/reading-list-front-end/.env.example` file and rename it to `.env`.
    2. Enter values for the parameters in the `.env` file as given below.
    3. On the page of the application you created in Asgardeo, **Configure the AuthProvider** section displays some parameters with values. You can copy those values for some of these parameters in the `choreo-reading-list-application-example/reading-list-front-end/.env` file based on the mapping given in the following table:
    `VITE_SIGNIN_REDIRECT_URL`  | `signInRedirectURL`
    `VITE_SIGNOUT_REDIRECT_URL` | `signOutRedirectURL`
    `VITE_ASG_CLIENT_ID`        | `clientID`
    `VITE_BASE_URL`             | `baseUrl`
    4. Enter values for the rest of the parameters as given below:
        - `VITE_RESOURCE_SERVER_URL`
            1. On the page for the `readingList` REST API in the Choreo Console, click **Test** to open the **Test** tab.
            2. In the **Open API Console** pane, copy the API endpoint.
            3. Add `/books` to the end of the API endpoint you copied to complete the resource server URL.
        - `VITE_CHOREO_CLIENT_ID`
            1. Access the Choreo Developer Portal at https://devportal.choreo.dev/.
            2. In the top menu, click **Applications** and then click the **readingListApp** application.
            3. In the left navigation menu, click **Production Keys**.
            4. Copy the value in the **Consumer Key**field and paste it as the value of the `VITE_CHOREO_CLIENT_ID` parameter.
        - `VITE_ORG_HANDLE`
            This is the value displayed next to the **Asgardeo** logo in the Asgardeo Console.
        - `VITE_STS_TOKEN_ENDPOINT`
            1. In the Choreo Developer Portal, open the **readingListApp** application.
            2. Copy the value in the **Token Endpoint** field and paste it as the value of the `VITE_STS_TOKEN_ENDPOINT` parameter.
Now you have configured your front-end application. Next, you need to configure Asgardeo as the identity provider for your application.

#### Step 2.3.3: Configure Asgardeo as an identity provider for Choreo
Let's deploy a pre-designed front-end application. This application is designed to personalize the readingList based on the user ID that it obtains from its identity provider. To enable the application to obtain the user ID, let's configure Asgardeo as the identity provider by following the steps given below:
!!! info
    To configure an identity provider for Choreo, you need administration privileges in Choreo.
1. In the Choreo Console, open the **Home** page.
2. In the left navigation menu, click **Settings**.
3. Click API Management and under **Identity Providers**, click **+ Add Provider**.
4. In the list of identity providers, click **Asgardeo**.
5. In the **Asgardeo** dialog, enter the following information:
    1. In the **Name** and **Description** fields, enter a name and a description for the identity provider.
    2. To get the well-known URL, follow the steps given below:
        1. Navigate to Asgardeo and open the single-page application you created.
        2. Click **Info** to view the endpoints of the application.
        3. Copy the endpoint in the **Discovery** field.
        4. Navigate to the Choreo Console and paste the URL you copied in the **Well-Known URL** field in the **Asgardeo** dialog.
    3. Click **Next**, and then click **Add**.
Now you have successfully configured Asgardeo as the identity provider for the front-end application.

#### Step 2.3.4: Create a user in Asgardeo
To sign in to the `readingListApp` application and create private reading lists, the end users require user IDs. The end users can self-register these user IDs in Asgardeo or request an Asgardeo user with administration privileges to add them. For more information, see Asgardeo Documentation - Manage users (https://wso2.com/asgardeo/docs/guides/users/manage-customers/#onboard-a-user). For this use case, you will play the role of an Asgardeo user with administration privileges who registers the user IDs. To define a user for the readingListApp application, follow the steps given below:
1. Navigate to the Asgardeo Console.
2. On the **Home** page, click **View users** to open the **Users** page.
3. Click **Add User**.
4. In the **Add User** dialog, enter your email, first name, and last name, and click **Finish**. Asgardeo will send you an email to set your password.  It will also open your user profile on a separate page.
5. In your user profile, toggle the **Lock User** switch to unlock your profile.
6. In the email you received from Asgardeo (with the subject **Here is your new account in the organization <ORGANIZATION_ID>**), click **Set Password**.
7. Enter a password that matches the given criteria in the **Enter new password** and **Confirm password** fields, and click **Proceed**.
!!! tip 
    You can create more users to test your front-end application.

#### Step 2.3.5: Invoke the REST API
To run the front-end application and send requests to the `readingList` REST API via it, follow the steps given below:
!!! info
    To render the front-end application as a web application, you will be using the Node Package Manager (https://www.npmjs.com) software.
1. In the terminal, navigate to the `choreo-reading-list-application-example/reading-list-front-end` directory in the clone of your GitHub repository.
2. Issue the following commands in the given order:
    - `npm i`
        This command installs the latest Node Package Manager (https://www.npmjs.com) version in the local directory where the front-end application resides.
    - `npm run dev`
        This command runs the front-end application as a web application.
  The front-end application will start running at http://localhost:5173/ as logged in the terminal.
3. Access the front-end application via http://localhost:5173/.
4. Click **Login**, and sign in with the credentials of a user that you have created in Asgardeo.
5. To allow your application to access your Choreo account, select the **User Account** checkbox and click **Allow**.
6. Add three new reading items with different statuses.
    For example, the details can be as follows:
    `The Museum of Innocence` | `Orhan Pamuk`     | `reading`
    `The Remains of the Day`  | `Kazuo Ishiguro`  | `to_read`
    `David Copperfield`       | `Charles Dickens` | `read`
    To add each record, follow the steps given below:
    1. Click **+ Add New**.
    2. Enter values for the **Name**, **Author**, and **Status** fields.
    3. Click **Save**.
    Three tabs will appear for each status. To delete a reading list item, you can click **Delete** for it.
To verify whether the reading list is personalized for each user, you can log in as a different user. The reading list items you entered above will not appear for the other user.",3084
Get Started with Choreo,Create and publish a new version of the REST API,"Currently, the updates to the `readinglist` REST API are saved only as long as the deployment status of the `readingList` API remains **Active**. If you undeploy and redeploy the `readingList` API, Choreo deploys it in a new container. Therefore you cannot retrieve the reading list with the updates you made after the last deployment. To persist the data even after undeploying and redeploying the REST API, let's connect it to a MySQL database. Then let's create and publish a new version of the REST API with the ability to persist the data to the MySQL database.

### Step 3.1: Create a new version of the REST API
Let's create a new version of the `readingList` REST API that can connect to a MySQL database on a cloud platform to persist data, and then redeploy it. To do this, follow the steps given below:
1. In the Choreo Console, open the `readingList` REST API (if it is not already open) and click the **Deploy** icon to open the **Deploy** tab.
2. Expand the list of versions and click **+ Create New**.
3. Select **version-2** as the associated GitHub branch and enter `2.0.0` as the version name. Next click **Create**.
    !!! info
        The `version-2` GitHub branch has another version of the REST API implementation with the required configurations to connect to the sample MySQL.
4. Click **Config & Deploy**.
5. For this scenario, you can connect to the pre-configured MySQL database on AWS. To do this, enter the following information in the **Configure & Deploy** pane:
    !!! info
        When you are connecting to an external database for a real-life use case, you are required to provision your database on a cloud platform. To allow Choreo to connect to the external database, it is important to add the relevant IPs to the allow list.For detailed instructions, see Access Your RDBMS Data Using Choreo (https://wso2.com/choreo/resources/access-your-rdbms-data-using-choreo/).
    **dbHost**     | `choreo-gsg-db.csobrmx6fi0k.ap-south-1.rds.amazonaws.com`
    **dbUser**     | `admin`
    **dbPassword** | `qYy71wQaxfLlH4`
    **dbName**     | `reading_list_db`
    **dbPort**     | `3306`
7. Click **Deploy**.
Now you have successfully deployed a new version of your REST API.

### Step 3.2: Publish the new REST API version
To publish the new version of the REST API you created, repeat step Publish the REST API

### Step 3.3: Consume the new REST API version
You can try out the new version via the front-end application.
!!! info
    You do not need to subscribe the `readingListApp` application on the Developer Portal to the new REST API version because Choreo automatically creates this subscription.",734
Create Your First REST API,Create Your First REST API,"A RESTful API (Application Program Interface) uses HTTP requests to access and use data. The operations you can perform on data are GET (reading), PUT (updating), POST (creating), and DELETE (deleting). Choreo’s low-code editor allows developers to easily design (and then implement) high-quality REST APIs. To explore this capability, let's consider a scenario where an Analyst needs to retrieve the daily count of COVID-19 patients per one million population by country. In this tutorial, you will address this requirement by doing the following:
- Design a REST API that addresses the described requirement, test it in the Web Editor, and then commit it so that it is available in the Choreo Console.
- Deploy the REST API you created to make it available for use.
- Test the REST API after deploying it to check whether it works as expected.",189
Create Your First REST API,Create,"In this section, let's create the API that retrieves COVID-19-related statistics.

### Step 1.1: Create a project and add a REST API component
1. Sign in to the Choreo Console at https://console.choreo.dev/.
2. On the **Home**** page, click the **+ Create Project**.
3. Enter a unique name and a description for the project. For this tutorial, let's enter the following values:
**Name**        | `COVID-19Stats`
**Description** | `Get statistics relating to COVID-19`
4. Click **Create**. This takes you to the **Components** page.

### Step 1.2: Add a REST API component
Let's create a new REST API component as follows:
1. On the **Components** page, click **Create** on the **REST API** card.
2. Enter a unique name and a description for the API. For this tutorial, let's enter the following values:
**Name**        | `Statistics`
**Description** | `COVID-19 Statistics`
3. Click **Next**.
4. Provide authorization for Choreo to connect to your GitHub account by clicking  **Authorize with GitHub**. 
5. If you have not already authorized Choreo applications, click **Authorize Choreo Apps** when prompted.
6. Select a GitHub account, a repository that includes the implementation, the relevant branch, and the build preset (i.e., **Ballerina** or **Dockerfile**).
7. Enter the following values based on the preset you selected above:
    - **Ballerina** preset
        - **Path**: Enter a valid path relative to the root of your repository that points to the implementation of the REST API. If you have not designed and implemented your REST API yet, you can connect an empty GitHub repository or a sub-folder and proceed to create the component. 
            !!! info
                You can create a component by connecting an empty GitHub repository for the **Ballerina** preset. However, you can only deploy it after developing and pushing a Ballerina implementation for the relevant component type.
    - **Dockerfile** preset:
        - **Dockerfile path**: Enter a valid path relative to the root of your repository that points to the Dockerfile. The path must include `- Dockerfile`. Choreo validates the **Dockerfile path** and checks if the given file name contains the word `Dockerfile` ignoring cases.
        - **Docker context path**: Enter a valid path relative to the root of your repository that points to the Docker project.
        - **OpenAPI file path (Optional)**: Enter a valid path relative to the root of your repository that points to the OpenAPI schema. Choreo validates the input to check if the given file name has one of the following extensions: *.yaml, *.yml, or *.json.
8. Next, click **Create**.

### Step 1.2: Design the REST API
Designing the REST API involves specifying how the REST API should function by adding and configuring the required connectors and statements. You can do this by editing the low-code diagram of the REST API or by editing its code. You can implement your REST API in Ballerina or any other language and containerize it. You can use the Ballerina VS code extension (https://ballerina.io/downloads/) to develop the REST API in Ballerina.",830
Create Your First REST API,Deploy,"Once you have designed, tested, and committed the REST API, you need to deploy it so that users can invoke it. To deploy the API, follow the steps below:
1. Click the **Deploy** icon. Then in the **Build Area** card, click **Deploy Manually**.
    !!! note
         Automatic deployment is enabled by default. However, you have to deploy the component manually the first time. Subsequent deployments will occur automatically.
2. To check the progress of the deployment, observe the **Console** pane.
Once the API is deployed, the **Development** card indicates that the API is active as shown below.
Now you can test your deployed REST API to check again whether it is working as expected.",163
Create Your First REST API,Test,"Once you have deployed the Choreo application you can test it via the OpenAPI Console, a cURL command, or Postman. In this tutorial, let's test via the OpenAPI Console:
1. To open the test view, click **Test** in the **Development** card. Alternatively, you can click the **Test** icon in the left panel.
2. Click **Try it out**.
3. In the **country** field, enter `USA`.
4. Click **Execute**.
    Choreo displays the following response body under **Responses**.
Congratulations! You have now successfully created and tested a REST API in Choreo!",146
Create Your First REST API,Manage,"Once you have successfully deployed your API and tested it, you can perform the following actions for it
- Manage the lifecycle: You can publish your API to the Developer Portal to make it available for public use, or deploy it as a prototype so that users can try it out and provide feedback for improvement. Once you publish an API, you can deprecate it or block it from being used if required.
- Validate subscriptions: You can configure subscription validation to mandate subscriptions.
- Add documents: This involves attaching files with information about the API for users.
- Select/switch usage plans: You can select a usage plan for your API out of `Bronze` `Silver`, `Gold`, and `Unlimited` based on the level of traffic that you expect the API to receive. You can change the usage plan when required.
- Update API settings.",179
Create Your First REST API Proxy,Create Your First REST API Proxy,"Choreo is a low-code cloud-native platform for building integration solutions. In this tutorial, you will do the following to explore REST API Proxies in Choreo:
1. Expose an existing API by creating a REST API proxy
2. Deploy the REST API proxy
3. Test the REST API proxy to verify its functionality
4. Manage your REST API proxy by adding rate limiting and security policies and leveraging the platform's API management capabilities.",97
Create Your First REST API Proxy,Create a REST API Proxy,"You can create a REST API proxy in one of the following methods: 
- Design a new REST API proxy using an existing endpoint. 
- Importing an OpenAPI specification of the existing API.
In this tutorial, you will be importing an OpenAPI specification and creating a REST API proxy:
1. Sign in to the Choreo Console at https://console.choreo.dev.
2. On the **Home**** page, click the **+ Create Project**.
3. Enter a unique name and description for your project and click **Create**. 
    You can now start adding components to your project. Let's add a REST API proxy component.
    !!! tip
        Once you create a project successfully, you are taken to the components landing page. You can also select the components icon from the left menu and open the **Components** landing page. 
4. On the **Components** page, click **Create** under the **REST API Proxy** card.
5. Click **Import your OpenAPI**.
6. Select the **Input Type** and provide the OpenAPI URL as follows:
**Input Type** | OpenAPI URL
**OpenAPI URL** | `https://petstore3.swagger.io/api/v3/openapi.json`
7. Click **Next**.
8. Review the information (API Name, API Version, API Base Path, Endpoint) that Choreo extracted from the OpenAPI. You can make any changes to the fields if you require. Click **Create** to create your REST API Proxy.",350
Create Your First REST API Proxy,Deploy the REST API Proxy,"Deploying the REST API proxy makes it invokable. Choreo maintains two environments by default: development and production.
1. Return to the Choreo Console. From the left navigation, click **Deploy**. 
2. Let's deploy the REST API proxy to the development environment. Click **Config & Deploy** in the **Build Area** column.
3. Once you have deployed it to the development environment, you can test it. When you are ready to take it to production, you can come back to this view and promote it by clicking on the **Promote** button on the **Development** column.",130
Create Your First REST API Proxy,Test your REST API Proxy,"In Choreo, you can test your REST API proxy before publishing it for consumers to use. Choreo provides you with three modes to test your REST API proxy: 
- OpenAPI Console 
- cURL
- Postman
In this tutorial, let's use the inbuilt OpenAPI Console. 
1. Click **Test** from the left navigation.
2. Select `Development` as the environment from the **Environment** dropdown. 
3. Choreo uses OAuth 2.0 Therefore, you will notice the security header. Click **Get Test Key** to generate a new test key for testing purposes.
4. Let's invoke. Expand the **GET** resource **/pet/{petID}**.
5. Click **Try it Out**.
6. Enter `1` as the **petid**.
7. Click **Execute** and observe the response.",194
Create Your First REST API Proxy,Manage your REST API Proxy,"Now that you have a tested REST API proxy, let's publish it and make it available for application developers to consume.

### Step 5.1: Secure your REST API Proxy
First, let's review the security settings and add a rate limit to the API. 
1. Click **Manage** on the left navigation and click **Settings**.
2. Click **Security**. Review the security settings. If you wish to change the security settings, click **Edit** at the bottom of the page and make the necessary changes. Once the changes are confirmed, you can save them by clicking on **Save**.
3. Next, let's add a rate-limiting policy to the API. Click **Resources**.
4. Scroll down to the end of the page and click **Edit**.
5. Scroll back up and select the **Rate Limiting Level** to be **API Level**. Here, you are adding a rate-limiting policy to the entire API. You can also choose to apply rate limits per resource.
6. Next, from the list, select an appropriate rate limiting level.
7. Click **Save**.

### Step 5.2: Apply usage plans on the REST API Proxy
Apply usage plans on the REST API proxy to allow API developers to select the suitable usage plan when subscribing to the REST API proxy.
1. Click **Usage Plans** from the left menu. 
2. Select **Bronze**, **Gold**, and **Unlimited**. 
3. Click **Save**.

### Step 5.3: Publish the REST API Proxy 
Publishing the REST API proxy makes it available for consumers to discover and subscribe to. 
1. Click **Lifecycle** from the left menu. 
2. Click **Publish**.
    A pop-up named **Publish a connector** appears. Let's publish a connector for this REST API proxy. Creating a connector for this REST API proxy makes it available on the Marketplace. Click **Yes, Please**.
3. Click **Publish**.
    As a result, the status of the API changes to **Published**.
    To understand how a user can generate credentials for the API and then invoke it, proceed to the next step.

### Step 5.4: Invoke your REST API Proxy
Now your REST API proxy is ready to be consumed. An application developer can discover your REST API proxy, subscribe to it, and invoke it. 

#### Step 5.4.1: Generate Credentials
1. On the **Lifecycle Management** page, click **Go to DevPortal**.
2. Once you sign in to the API Developer Portal, click **Credentials** in the navigator.
3. Click **Generate Credentials**. As a result, Choreo populates the **Consumer Key** and **Consumer Secret** fields with the newly generated tokens.
4. Click **://Curl**. Then copy the cURL command that is displayed.
    !!!info
        Click the button to copy the cURL command. **Do not manually copy it**. The displayed cURL command is only a template, and it does not include the generated credentials.
5. Close the **Get cURL to Generate Access Token** card. Then click **Update**. 
    A message appears to confirm that the keys are successfully updated.
6. Replace `consumer-key` and `consumer-secret` with the consumer key and the consumer secret you generated in the API Developer Portal to generate an access token.
Now, let's try out the REST API proxy you created by invoking a resource. 

#### Step 5.4.2; Invoke the REST API Proxy
1. Click **Try out**.
2. Enter the following values:
**Environment** | `Development`
**Access Token**| the generated access token in step 6. Alternatively, click **Get Test Key** to generate a test access token.
3. Expand the **GET** resource **/pet/{petid}**
4. Click **Try it out**.
5. Enter the **petid** value as `1`.
6. Click **Execute** and observe the response. 
Congratulations! You have successfully created your first REST API Proxy, deployed, developer tested, managed, and invoked it. ",951
Create Your First Webhook,Create Your First Webhook,"Choreo’s low-code editor allows developers to easily design (and then implement) high-quality webhooks. To explore this capability, let's consider a scenario where a team of software engineers in an organization wants to be notified via email whenever someone creates a GitHub issue with the `bug` label in a specific repository. In this tutorial, you will address this requirement by doing the following:
- Create a webhook component by connecting to your GitHub repository that includes the implementation of the webhook that addresses the described requirement.
- Deploy the webhook you created to the development environment.
- Modify the webhook implementation to connect the webhook implementation to GitHub, enabling it to act in response to selected GitHub-related events.
- Test the webhook.
- Promote the webhook to the production environment.",172
Create Your First Webhook,Develop,"To create a project, add a Webhook component to it, design the webhook, test it, and then commit it to make it available in the Choreo Console, follow these sub-steps:

### Step 1.1: Create a project and add a Webhook component
First, let's add a Webhook component as follows:
1. Sign in to the Choreo Console at https://console.choreo.dev.
2. On the **Home** page, click **+ Create** Project.
3. Enter a unique project name and a description. For this tutorial, let's enter the following values:
**Name**        | `IssueTracking`
**Description** | `Track GitHub issues`
4. Click **Create**. This takes you to the **Components** page.
5. On the **Components** page, click **Create** on the **Webhook** card.
6. Provide authorization with your GitHub account by clicking  **Authorize with GitHub**. 
7. If you have not already authorized Choreo apps, click **Authorize Choreo Apps** when prompted.
8. Select a GitHub account, a repository that includes a Ballerina project or a Dockerfile, the relevant branch, and **Ballerina** as the build preset.  
9. Enter a valid path relative to the root of your repository that points to the implementation of the webhook. If you have not designed and implemented your webhook yet, you can connect an empty GitHub repository or a sub-folder and proceed to create the component. 
    !!! note
        If you connect an empty GitHub repository to create the component, you cannot deploy the component. Be sure to implement your webhook before proceeding to the deployment stage. 
10. Click **Next**.
10. In the **Create a Webhook** pane, click on the Webhook type you want to create, for example **GitHub**. 
11. Click **Create**.
    1. In the **Webhook Name** field, enter a unique webhook name (e.g., `IssueTracking`).
    2. From the **Trigger Channel** list, select **IssuesService** so that the system can trigger your webhook based on a change it observes in GitHub issues (i.e., assigning a label in this scenario).
    3. Click **Create**. The webhook opens on a separate page.
      
### Step 1.2: Design the webhook
Designing a webhook involves specifying how the webhook should function by adding and configuring the required connectors and statements. You can do this by editing the low-code diagram of the Webhookor by editing its code. You can implement your webhook in Ballerina or any other language and containerize it. You can use the Ballerina VS code extension (https://ballerina.io/downloads/) to develop the webhook in Ballerina. For example, you can use the following source code to design a webhook to read the labels of GitHub issues in a specific repository and generate an email notification for GitHub issues with the `bug` label. You can add this code in the .bal file in your repository.",713
Create Your First Webhook,Deploy,"Let's deploy your webhook to the development environment to make it invokable:
1. In the Choreo Console, click **Deploy** for your Webhook component, and click **Config & Deploy**.
2. In the **Configure & Deploy** pane, enter the following information:
    1. In the **toEmail** field, enter the email address to which you want the webhook to send the notification emails.
    2. In the **webhookSecret** field, enter any value.
        !!! note
            You must save this value for later use.
    3. Click **Deploy**.
    Choreo starts deploying the webhook. You can monitor the progress of the deployment in the **Console** pane that opens on the right of the page.
Once Choreo completes the deployment, the **Deploy** page displays the **Active** deployment status for the webhook.
!!! notes
    - The **Invoke URL** shows the URL via which GitHub can invoke the webhook.
    - You can update the security header of the webhook by clicking the refresh icon within the **Security Header** field.
        - The **Configurables** field shows the number of times you have updated the webhook secret. You will see **2 keys configured** text displayed in this field if you specified a different webhook secret when you tested the webhook in the Web Editor. If you want to edit the webhook secret again, follow these steps:
        1. Click the edit icon within the **Configurables** field.
        2. In the **Configure & Deploy** panel, enter a webhook secret different from the one you specified previously.
        3. Click **Deploy**.
You can now connect the webhook to the required GitHub repository.",433
Create Your First Webhook,Connect the webhook to the GitHub repository,"To allow the webhook to read the labels of the required GitHub repository, you need to connect the webhook to this repository. To do this, follow these steps:
1. On the **Deploy** page, copy the invoke URL by clicking the copy icon within the **Invoke URL** field.
2. Access your GitHub account and open the repository for which you want to generate notification emails.
3. In the top menu, click **Settings**.
4. In the left navigation, click **Webhooks**.
5. Click **Add Webhook** and enter the following information:
**Payload URL**  | The invoke URL you copied in Step 3, sub-step 1.
**Content Type** | Select `application/json`.
**Secret**       | The last webhook secret you configured.
6. Under **Which events would you like to trigger this webhook?** select **Let me select individual events**.
7. Select the **Issues** checkbox in the list that appears. By doing so, you select GitHub issues as events that need to trigger this webhook. 
8. In the same list, clear the **Pushes** check box to ensure that GitHub does not trigger your webhook when the team pushes changes to the selected GitHub repository.
9. Click **Add Webhook** to save the configuration.
Now you have integrated Choreo with GitHub via the webhook you created and deployed. Proceed to step 4 to test it.",318
Create Your First Webhook,Test,"To test your webhook, create a GitHub issue with the `Bug` label in the repository to which you connected the webhook.
You will receive a mail similar to the following to the email address you provided.",44
Create Your First Webhook,Promote,"To promote the webhook to the Production environment, follow these sub-steps:
1. On the **Deploy** page, click **Promote**
2. In the **Configure & Deploy** pane, leave the default selection (i.e., **Use default configuration values**) unchanged. If you have configured any default values for the configurable variables, selecting **Use default configuration values** allows you to proceed with those values. However, you did not configure any default values for configurable variables in this tutorial. Therefore, you need to enter new values.
3. To enter values for configurable variables, click **Next**.
4. In the **toEmail** field, enter the email address to which you want the webhook to send the notification emails.
5. In the **webhookSecret** field, enter any value.
    !!! note
        You must save this value for later use.
6. Click **Promote** in the pane.
    Once the system completes the promoting process, the **Production** card displays the deployment status as **Active**.",238
Create Your First Integration,Create Your First Integration,"An integration component integrates APIs, microservices, applications, and data in different languages and formats. Consider a scenario where a developer has created an integration in WSO2 Integration Studio(https://wso2.com/integration/integration-studio/) and wants to use it for API-led integration by exposing it in Choreo. In this tutorial, you will learn how to do the following actions to address this requirement:
- Expose an integration created in WSO2 Integration Studio(https://wso2.com/integration/integration-studio/) as an API in Choreo by connecting the GitHub repository in which it resides to Choreo.
- Deploy the Integration component to the development environment.
- Test the Integration component.
- Observe statistics for the Integration component.
- Publish the Integration component and try it out in the production environment.
For this tutorial, let's use a basic sample application to expose a proxy service developed in the WSO2 Integration Studio(https://wso2.com/integration/integration-studio/).
!!! tip ""Before you begin!""
    To try this tutorial, you can use a sample integration designed via WSO2 Integration Studio(https://wso2.com/integration/integration-studio/).To do this, fork the choreo-examples GitHub repository (https://github.com/wso2/choreo-examples/tree/main/ipaas/wso2-synapse/simple-proxy).",328
Create Your First Integration,Create,"Let's add the integration by following the steps given below:
1. Sign in to the Choreo Console at https://console.choreo.dev/.
2. On the **Home** page, click on the project in which you want to create the integration. Alternatively, you can click **+ Create Project** and add a new project.
3. If your project has one or more components, click **+ Create**. If not, proceed to the next step.
4. On the **Integration as an API** card, click **Create** to start creating a micro integrator REST API.
5. Enter a name and a description for the micro integrator REST API. For example, you can enter `MI Hello World` as the name and `MI Hello World REST API` as the description.
6. To the micro integrator REST API as a publicly accessible API, leave the selection in the **Access Mode** list unchanged.
7. Click **Next**.
8. Authorize Choreo to connect to your GitHub account by clicking **Authorize with GitHub**.
9. If you have not already authorized Choreo applications, click **Authorize Choreo Apps** when prompted.
10. Enter information related to the GitHub repository you want to connect as follows:
**GitHub Account**    | Select your GitHub account.
**GitHub Repository** | Select your fork of the choreo-examples GitHub repository (https://github.com/wso2/choreo-examples).
*Branch**            | `main`
11. Under **Build Preset**, click **Micro Integrator**.
     !!! info
         The build preset specifies the type of build that Choreo needs to run for the component (for example, Choreo needs to run a micro integrator build for components developed via the WSO2 Integration Studio https://wso2.com/integration/integration-studio/).
12. Enter information related to the `MI Hello World` project as follows:
**Path**              | `ipaas/wso2-synapse/simple-proxy`
**OpenAPI File Path** | `ipaas/wso2-synapse/simple-proxy/openapi.yaml`
13. Click **Create**.
The micro integrator REST API opens on a separate page.",545
Create Your First Integration,Deploy,"Let's deploy the micro integrator REST API you created to the developer environment by following the steps given below:
1. In the left navigation menu, click **Deploy**.
2. Click **Deploy Manually**.
    !!! info
        Automatic deployment is enabled for the component by default. You are required to carry out only the first deployment manually.
Once Choreo has deployed the micro integrator REST API, you can proceed to the next step to test it.",108
Create Your First Integration,Test,"Once you have deployed the Integration REST API you can test it via the OpenAPI Console, or a cURL command.
In this tutorial, let's test via the OpenAPI Console:
1. To open the test view, click **Test** in the **Development** card. Alternatively, you can click the **Test** icon in the left panel.
2. Click **OpenAPI Console**.
3. Select **/HelloWorld** resource and click **Try it out**.
4. Click **Execute**. Choreo displays the following response in **Response body**.
    `{""Hello"":""Integration""}`
The above response indicates that your micro integrator REST API is working as expected.",152
Create Your First Integration,Observe,"To observe statistics for your micro integrator REST API, click **Observe** in the left navigation menu. The graphs for throughput and latency will display the request you sent.",35
Create Your First Integration,Publish,"Let's publish the micro integrator REST API to make it available for subscriptions in the Developer Portal.
1. In the left navigation menu, click **Manage**, and then click **Lifecycle**.
2. Click **Publish**. The lifecycle status of the API will change to **Published**.
3. To view the API in the Developer Portal, click **Go to Devportal**. The API opens on a separate page in the Developer Portal.
Congratulations! You have successfully exposed an integration designed in the WSO2 Integration Studio (https://wso2.com/integration/integration-studio/) as a REST API in Choreo and published it!
!!! info ""What's next""
    For a micro integrator REST API, you can also perform API management actions.",175
REST APIs,REST APIs,"Explore how you can easily design, develop, and manage REST APIs in Choreo to implement your business API strategy.",24
REST APIs,What is a REST API?,"A Representational State Transfer(REST) API is an Application Programming Interface(API) that complies with the constraints of REST architectural styles and principles. REST is an architectural style (https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm) introduced by Dr. Roy Fielding in his doctoral dissertation in the year 2000. Dr.Roy initially designed it as a guide for the development of modern web architecture. Today, REST is widely adopted to create high-performance, stateless, and reliable APIs that various applications use.",122
REST APIs,Designing a REST API,"Designing a REST API is the process of declaring the resources, the appropriate HTTP verbs, paths, and input (request) and output (response) data formats to showcase the capabilities of the API. Designing an API based on a standard helps to do the design well and provide a consistent experience to the users of your API. The OpenAPI Specification (https://github.com/OAI/OpenAPI-Specification) is the most widely used standard for declaring HTTP/REST APIs. The design of an API is a crucial factor that determines the usability and the value of the API. A well-designed API is profitable due to the ease of adoption. Choreo’s low-code editor allows developers to design (and develop) high-quality REST APIs with ease. To design a REST API in Choreo, you must create a REST API component. You can design a REST API from scratch by manually specifying the resources, the HTTP verbs, paths, and other required elements. The Choreo roadmap also includes the capability to design a REST API by importing an OpenAPI document, which will be available soon.
Choreo allows you to design your REST API in three possible ways
- **Start from scratch**
    You can design a REST API via Choreo’s low-code editor that allows developers to design (and develop) high-quality REST APIs with ease. This method involves designing the REST API from scratch by manually specifying the resources, the HTTP verbs, paths, and other required elements.
    Choreo allows developers to easily specify input and output data formats for each API resource:
- **Connect existing Ballerina repository**
    If you have a REST API written in the Ballerina Programming Language (https://ballerina.io), you can deploy it in Choreo. To do this, you must save it in a private GitHub repository and connect that repository to Choreo.
- **Bring your Dockerfile**
  If you have an existing REST API written in any programming language, you can deploy it in Choreo. To do this, you must generate a Docker image for the REST API and save the Dockerfile in a private GitHub repository. When you connect this GitHub repository to Choreo, you can build the Dockerfile to pull the REST API implementation from the Docker image.",492
REST APIs,Developing a REST API,"Choreo supports spec-driven API development. Once you have carefully designed and defined your API, you can start implementing the functionality of your API. Choreo comes with an online IDE based on Visual Studio Code for developers to implement API functionality. With its support for both low-code and pro-code modes to implement APIs and the flexibility to alternate between the modes during development, Choreo makes API development easy, smooth, and developer-friendly.

### Low-code mode
The low-code programming model allows developers to use general programming constructs such as loops, conditional statements, variable declarations and assignments, logs, data transformations(visual data mapping), and more in a graphical editor. It also allows developers to connect to built-in or custom-developed connectors.
The main advantage of the low-code programming mode is that it can increase developer productivity multiple folds by eliminating the need to write complex code. As developers use constructs on the low-code editor to implement the API, the IDE automatically writes the corresponding Ballerina (https://ballerina.io/) source code for the API, which significantly speeds up the developer learning process and boosts overall productivity.

### Pro-code mode
The pro-code mode of Choreo allows developers to directly edit code in a manner where the graphical representation in the low-code editor gets updated accordingly. Choreo also allows viewing the low-code and pro-code editors side-by-side.
Choreo gives developers the flexibility to use the pro-code mode only or to use it for implementing specific parts of the API while using the low-code mode for the rest, based on their preference. Choreo treats the source code (generated and handwritten) as the single source of truth and has no limitations or restrictions on the mode you can choose to implement API functionality.",377
REST APIs,Lifecycle of a REST API,"Once you implement a REST API, it needs to be built, tested, and eventually put into production. Choreo executes a CI/CD pipeline to manage the API lifecycle. Choreo stores the source code of APIs in a private GitHub repository for the user account. It also provides the capability for developers to connect their own GitHub repositories containing the source code of their APIs. The CI/CD pipeline in Choreo takes an API through the complete process, starting from code checkout to compile, build, test, and finally deploy.",109
REST APIs,Deploying a REST API,"Choreo runs a professional, enterprise-grade CI/CD process to deploy APIs to their runtime(data plane) clusters. The data plane of Choreo runs on a Kubernetes stack under the hood. Therefore, you can benefit from its features such as auto-scaling, auto-healing, secret-management, liveness and readiness checks, etc.
Once you deploy a REST API to the development environment, it gets exposed through an API Gateway with API security enabled. At this time, Choreo provides a test URL for the API, which you can use to verify the functionality of the API.",128
REST APIs,Choreo environments,"Choreo provides a development environment by default and a production environment in two separate Kubernetes clusters. Once you deploy an API to the development environment and verify its functionality, you can promote the API to the production environment.
Once you promote an API to production, Choreo provides a second URL that you can use in a production application to invoke the API.",75
REST APIs,API management,"Choreo provides API management capabilities by default for REST APIs (and other APIs) so that you can manage the exposure of APIs to consumers. Choreo API management capabilities also allow you to configure API security settings, set rate limits, associate usage plans, provide other documentation, and perform other related functions to govern the API.
The inbuilt Choreo Developer Portal makes it easy for consumers to consume published APIs. Application developers can discover and invoke published APIs via the Choreo Developer Portal. To learn more about the Choreo Developer portal, see Developer Portal",115
REST APIs,Observability,"Choreo allows you to visualize and monitor the performance of REST APIs deployed on Choreo. Choreo has in-built support for viewing the overall status, latencies, throughput data, diagnostic data, and logs. Developers can efficiently detect and troubleshoot anomalies in REST APIs using  Choreo Observability.",66
REST APIs,Business insights,"Once you take your APIs to production, you need to constantly analyze the APIs to get a good understanding of their usage.",24
REST API Proxy,REST API Proxy,Learn how you can expose an existing API through a REST API Proxy in Choreo and go on to manage it leveraging the full API Management capabilities of Choreo.,34
REST API Proxy,What is a REST API Proxy?,"A REST API Proxy is an API proxy that complies with the Representational State Transfer(REST) standards. The REST API proxy fronts the API and is the contact point for applications that want to consume the API. Although APIs decouples the backend and the application, an API alone cannot ensure security for the backend and the application by applying policies such as security, rate-limiting, etc. This is where a REST API Proxy comes into play. A REST API Proxy helps you manage the API by applying necessary security policies, access-control policies, and even collecting analytics. Fronting your unmanaged API by a REST API proxy gives your application the flexibility to make changes to the backend API without affecting the applications that consume them. 
A REST API Proxy exposes an endpoint that applications use to consume the API.",165
REST API Proxy,Develop a REST API Proxy,"Designing your REST API proxy from scratch involves declaring the resources and the methods the end-user applications will use to access the API. Choreo supports spec-driven API Proxy development. Therefore, it guides you visually via a Swagger editor to create REST API Proxies that comply with The Open API Specification (https://github.com/OAI/OpenAPI-Specification). It is the most widely used standard for declaring HTTP/REST APIs. Choreo also allows you to generate your OpenAPI specification through this editor.
Choreo allows you to easily expose your existing APIs via a REST API proxy and convert it to a managed API. You can create a REST API Proxy in Choreo in two ways:
- From scratch by using an existing endpoint 
- By importing an OpenAPI specification

### Designing a new REST API Proxy using an existing endpoint 
You can front your existing API with a REST API Proxy easily using Choreo. To design a new REST API Proxy, you need to create a REST API Proxy component and specify the API name, the base path, and the endpoint to create the basic API definition. Once Choreo creates the API definition, you can then define the resources by specifying the URI pattern, the HTTP methods, and optionally, any parameters:

### Designing a new REST API Proxy by importing an OpenAPI specification
Choreo allows you to create a REST API Proxy by importing an Open API Specification or providing an URL to the Open API specification. Choreo will then extract the API name, base path, and endpoint. Choreo gives you the flexibility to change this information as required. Once you create the API Proxy, you can modify it by defining the resources, URI pattern, HTTP methods, and any parameters (optional).
Once you create an API proxy in Choreo, you can access the API definition of that API. Choreo also exposes the endpoints for the API where it maintains two gateway environments, production, and sandbox.",418
REST API Proxy,Deploying a REST API Proxy,"Choreo runs a professional, enterprise-grade CI/CD process to deploy APIs to its runtime(data plane) clusters. Under the hood, Choreo's data plane runs on a Kubernetes stack, hence benefits from all its features such as auto-scaling, auto-healing, secret management, liveness, readiness checks, and so on.
Once you deploy the REST API to the development environment, it is then exposed by an API Gateway with API security turned on. Developers get a testable URL for their API which they can use to verify the functionality of the API they implemented.
You may set up a separate sandbox environment to test the API proxy before pushing it to production. To deploy the API proxy to both the sandbox environment and the development environment, enter the test environment URL as the sandbox endpoint and the API backend URL as the endpoint.",178
REST API Proxy,Choreo environments,"Choreo by default provides a development environment and a production environment in two separate Kubernetes clusters. Once you have deployed the API to the development environment and its functionality has been verified, developers can then promote their APIs to the production environment:
Once you have promoted the API to production, Choreo then shows a second URL that developers can use in production applications to invoke the API.",80
REST API Proxy,Test the REST API Proxy,"Once you deploy your API, it is ready to be tested. Testing your REST API Proxy is an integral part of the spec-driven API development approach. Testing your API Proxy in Choreo can be done in 3 ways:
- Via the inbuilt OpenAPI Console
- Via cURL
- With a Postman integration

### In-built OpenAPI console
The in-built OpenAPI console is an interactive UI where you can test your API Proxy easily. You can test your APIs in the environments you deploy them in by selecting the environment. Choreo by default uses OAuth2.0 authentication. Therefore the OpenAPI console provides you the option to generate your test keys to test the APIs. Once you meet the pre-requisites, you can test the different resources you defined by specifying any parameters if needed. 

### cURL
Choreo provides you with a cURL command based on the resource, method, and environment you want to test your REST API Proxy. You need to select the environment, the methods, specify the base path of the resource, and any parameters. Once you provide the information to Choreo, it will generate a cURL command with an API key in place for you to test. 

### Postman
Choreo also allows you to integrate Postman. To integrate Postman, you need to create a postman account, generate an API Key from Postman, and include them in the Choreo UI. Once you integrate Postman successfully, you can import Postman workspaces, or create new workspaces and continue to test it on Choreo.
",335
REST API Proxy,Manage the REST API Proxy,"API Management is automatically turned on in REST API Proxies (and other APIs) on Choreo. Converting an unmanaged API to a managed API is a key advantage of exposing REST API Proxies. Developers can use its capabilities to manage the exposure of APIs to their consumers. Developers can configure the API’s security settings, set rate limits, associate usage plans, provide other documentation, and perform other related functions to govern the API. 

### Lifecycle of a REST API Proxy
Once you implement a REST API Proxy, it needs to be built, tested, and eventually put into production. Choreo executes a CI/CD pipeline that manages the API’s Lifecycle. Choreo stores the source code of APIs in a private Github repository for the user account. It also provides the capability for developers to hook in their own Github repositories containing the source code of their APIs(coming soon). The CI/CD pipeline in Choreo takes an API through the whole process, starting with code checkout, to compile, build, test, and finally to deployment.

### Add documentation to the REST API Proxy
A well-designed API or API Proxy needs to be well-documented as well. The usability of the API/API Proxy is a deciding factor of its value. Many API developers find documenting an API a tedious task. Choreo makes documentation an easy task for developers by allowing different sources of documentation. Choreo allows you to add documentation to the REST API by specifying a URL, in Markdown format, importing a file, or by simply including inline documentation. 

### Usage Plans
The usage plan determines the number of requests allowed for the API per minute. Therefore, this is also the rate limit that applies to an API.

### Settings
A well-managed API needs to have security policies and access-control policies in place. Setting rate-limiting policies will ensure:
- Your API is protected from common types of security attacks such as certain types of Denial Of Service (DOS) attacks
- Traffic is regulated and the resources are not exhausted
In addition to providing different usage plans, Choreo also allows you to set different rate-limiting policies against the API or each resource. While the API level rate-limiting will impact the whole API, resource-level rate-limiting gives you the flexibility to change the rate-limiting policy per operation based on the anticipated or analyzed usage.
Choreo uses OAuth2.0 authentication.

### Consumers
Consuming the published APIs is made easy with the inbuilt Choreo Developer Portal. Application developers can discover and invoke published APIs using the Choreo Developer Portal.",556
Webhook,Webhook,Explore how you can create event-driven integrations with Choreo Webhooks.,18
Webhook,What is a webhook?,"A webhook is a cause that activates an action. Webhooks in Choreo are no different and are user-defined callbacks. 
Webhooks are used by developers to implement event-driven integrations. Before event-driven solutions,  to identify an event occurrence, systems had to keep polling other systems periodically.  With event-driven solutions, systems can focus on the main business-flow, and proactively be notified when an event of interest occurs in real-time. The following are some examples of scenarios where you can create webhooks for the mentioned platforms:
- Sending a chat message in a group chat when an event gets added in a slack channel.
- Generating an alert when a new issue gets created in a specific Git repository.
- Sending a notification when an event gets scheduled in a google calendar.
Webhooks are a widely used programming element to create event-driven API architectures for real-time solutions.",196
Webhook,Develop a webhook,"Developing a webhook is the process of creating the webhook by identifying the trigger event and implementing the logic to execute the event. You can create and design an event-driven integration using webhooks in Choreo easily. 
Choreo’s low-code editor allows developers to easily design and develop webhooks for platforms such as GitHub, Slack, and Google Calendar, etc. using the integrated pro-code or low-code editor. Creating a webhook in Choreo starts by either creating the Webhook component from scratch or by connecting an existing Ballerina repository. To create a webhook from scratch, you can start by creating a Webhook component and selecting the trigger type(e.g. GitHub).
Next, you can give the webhook a name, select the trigger channel, and select whether to manage the webhook code in a choreo-managed repository or in your own repository. Once you have created your webhook, you can start developing the logic for the specific event(E.g. onOpened). Choreo will execute this logic when the webhook is activated. E.g. send an email when an issue gets created in GitHub. Additionally, you can define any configurations needed to run the webhook.

### Low code mode
The low-code programming model allows developers to use common programming constructs such as loops, conditions(if/else, variable declarations and assignments, logs, data transformations(visual data mapping), and much more in a graphical editor. It also allows developers to connect to any built-in or custom-developed connectors (https://central.ballerina.io).
Choreo allows you to add multiple triggers and channels to your webhook implementation via the low-code editor. It also shows the configurations needed to deploy the Webhook component. 
The main advantage of the low-code programming mode is that it increases the developer productivity by multiple folds by eliminating the need to write complex code. As developers use constructs on the low-code editor to implement the integration logic for the webhook, the IDE automatically writes the corresponding Ballerina (https://ballerina.io) source code of the webhook. This speeds up the developer's learning process significantly and thereby boosts overall productivity.

### Pro code mode
In addition to the low-code mode, Choreo provides a pro code mode of implementing the webhook's functionality with the ability to alternate between low-code and pro-code at any time. Choreo's online IDE allows viewing the low-code and pro-code editors side by side.
Choreo gives the developers the flexibility to use the pro-code mode only or use it for implementing certain parts of the API and use the low-code mode for the rest (based on their preference). Choreo treats the source code (generated and handwritten) of the API as the single source of truth and therefore has no limitations or restrictions on which mode developers may choose to implement their webhook's functionality.",622
Webhook,Deploy a webhook,"Choreo provides an easy, interactive UI to help you deploy the webhook in Choreo to the default development environment. On deployment, Choreo prompts to add the configuration values that the developer has configured.
Choreo runs a professional, enterprise-grade CI/CD process to deploy APIs to its runtime(data plane) clusters. Under the hood, Choreo’s data plane runs on a Kubernetes stack and hence benefits from all its features such as auto-scaling, auto-healing, secret management, liveness, readiness checks, etc. When you deploy a webhook, Choreo checks out your latest code, builds it, creates a Docker image, and starts it in a Kubernetes cluster managed by Choreo. At this point, Choreo also registers the webhook with the relevant event source (e.g., GitHub, Slack, etc.). When the relevant action occurs in the event source, Choreo is notified through the callback. Choreo then activates the webhook and fires events. Choreo exposes HTTP-based webhooks as an API. Therefore, you can test, manage, and observe this API like any other API on Choreo.
Once you deploy the webhooks to the development environment, it is active in the developer environment. When you are ready to take the code to production, you can promote the deployment and enable the functionality to your consumers. 
Choreo allows you to view the deployment logs through the Deploy view. This helps you troubleshoot and view the status of the builds and deployment. 

### Choreo environments
Choreo by default provides a development environment and a production environment in two separate Kubernetes clusters. Once you have deployed the Webhook component to the development environment and its functionality has been verified, developers can then promote their webhooks to the production environment:
Once you have promoted the Webhook component to production, Choreo then shows a second URL that developers can use in production applications to invoke the webhook.

### Test your webhook
Testing your webhook is an integral part of the spec-driven API development approach. Once you deploy your webhook, it is ready to be tested. Testing your webhook in Choreo can be done in 3 ways:
- Via the inbuilt OpenAPI Console
- Via cURL
- With a Postman integration

### Integrated Console
The in-built Swagger console is an interactive UI where you can test your HTTP-based webhook easily. You can test your webhooks in the environments you deploy them by selecting the environment. Choreo, by default, uses OAuth2.0 authentication. Therefore the Swagger console provides you the option to generate your test keys to test the APIs. Once you meet the pre-requisites, you can test the different resources you defined by specifying any parameters if needed. 

### cURL
Choreo provides you with a cURL command based on the resource, method, and environment you want to test your webhook. You need to select the environment, the methods, specify the base path of the resource, and any parameters. Once you provide the information to Choreo, it will generate a cURL command with an API key in place for you to test. 

### Postman
Choreo also allows you to integrate Postman. To integrate Postman, you need to create a postman account, generate an API Key from Postman, and include them in the Choreo UI. Once you integrate Postman successfully, you can import Postman workspaces, or create new workspaces and continue to test it on Choreo.",772
Webhook,Manage webhooks,"Choreo exposes HTTP-based webhooks as APIs. Therefore, you can leverage the API management capabilities of Choreo to manage these APIs. API Management has automatically turned on for HTTP-based webhooks(and other APIs) on Choreo. Converting an unmanaged API to a managed API is a key advantage. Developers can use its capabilities to manage the exposure of APIs to their consumers. Developers can configure the API’s security settings, set rate limits, associate usage plans, provide other documentation, and perform other related functions to govern the API. 

### Lifecycle of the API exposing the webhook 
Once you implement a webhook, it needs to be built, tested, and eventually put into production as an API. Choreo executes a CI/CD pipeline that manages the API’s Lifecycle. Choreo by default stores the source code of webhooks in a private Github repository for the user account. Optionally, a user can choose to store the code in a user-managed repository. The CI/CD pipeline in Choreo takes an API through the whole process, starting with code checkout, to compile, build, test, and finally to deployment.

### Add documentation to the API exposing the webhook
A well-designed API needs to be well-documented as well. The usability of the API is a deciding factor of its value. Many API developers find documenting an API a tedious task. Choreo makes documentation an easy task for developers by allowing different sources of documentation. Choreo allows you to add documentation to the REST API by specifying a URL, in Markdown format, importing a file, or by simply including inline documentation. 

### Settings
A well-managed API needs to have security policies and access-control policies in place. Setting rate-limiting policies will ensure:
- Your API is protected from common types of security attacks such as certain types of Denial Of Service (DOS) attacks
- Traffic is regulated and the resources are not exhausted
In addition to providing different usage plans, Choreo also allows you to set different rate-limiting policies against the API or each resource. While the API level rate-limiting will impact the whole API, resource-level rate-limiting gives you the flexibility to change the rate-limiting policy per operation based on the anticipated or analyzed usage.
Choreo uses OAuth2.0 authentication.

### Consumers
Consuming the published APIs is made easy with the inbuilt Choreo Developer Portal. Application developers can discover and invoke published APIs using the Choreo Developer Portal. Learn more about the Choreo Developer Portal.

### Observe your webhook
You can assess the performance of your webhook by observing the success and failure rates of the requests sent to it. The observability view allows you to visualize the performance statistics via interactive graphs.",601
Scheduled Tasks,Scheduled Tasks,Learn how to use scheduled tasks to execute routine tasks at specified time intervals.,15
Scheduled Tasks,What is a scheduled task?,"A scheduled task performs a routine action at scheduled time intervals. Following are examples of scenarios where you can schedule tasks:
- Logging a session time-out message for a user at a specific time interval
- Publishing a summary of GitHub issues (i.e., with details such as the number of GitHub issues in each status) as a message in a group chat window of a team every day at a specific time
- Periodically checking whether an application is active or not",96
Scheduled Tasks,Develop a scheduled task,"Developing a scheduled task refers to configuring an action to be executed.
!!! tip
    The development stage does not require you to specify the time interval at which the system needs to execute the action of the scheduled task. You need to provide it only when you deploy the Scheduled Task component.
e.g., If you need to schedule a health check log for an application, you may need to configure the following:
- How the Scheduled Task component gets the heartbeat of the application that it is monitoring
- The conditions based on which the Scheduled Task component can determine whether the application is healthy or not
- A log that indicates whether the application is healthy or not to the end-user
You can develop a scheduled task with such configurations in three possible ways.

### Start from scratch
You can design a scheduled task via Choreo’s low-code editor that allows developers to design scheduled tasks with ease. This method involves designing the scheduled tasks from scratch by manually specifying the resources, the HTTP verbs, paths, and other required elements. You can do so in the low-code view or the pro-code view.

#### Low-code view
The low-code programming model allows developers to use commonly known programming constructs such as loops, conditions(if/else, variable declarations and assignments), logs, data transformations(visual data mapping), etc., in a graphical editor. It also allows developers to connect to any built-in or custom-developed connectors.
The main advantage of the low-code programming view is that it increases developer productivity by multiple folds by eliminating the need to write complex code. As developers use constructs on the low-code editor to implement the integration logic for the scheduled task, the IDE automatically writes the corresponding Ballerina (https://ballerina.io) source code of the scheduled task, speeding up the developer's learning process significantly and boosting overall productivity.

#### Pro-code view
In addition to the low-code view, Choreo provides a pro-code view for implementing the functionality of a scheduled task. You can switch between the two flows at any time. Choreo's online IDE allows viewing the low-code and pro-code editors side-by-side.
Choreo gives the developers the flexibility to implement the complete scheduled task using the pro-code view or to use the pro-code view for only some parts of the implementation and then use the low-code view for the rest, based on their preference. Choreo treats the source code of the scheduled task as the single source of truth irrespective of whether it is auto-generated from the low-code implementation or written manually by the developer. Therefore, there are no limitations or restrictions on which view developers may choose to implement the functionality of the scheduled task.

### Connect existing Ballerina repository
If you have a scheduled task written in the Ballerina Programming Language (https://ballerina.io), you can deploy it in Choreo. To do this, you must save it in a private GitHub repository and connect that repository to Choreo.

### Bring your Dockerfile
If you have an existing scheduled task written in any programming language, you can deploy it in Choreo. To do this, you must generate a Docker image for the scheduled task and save the Dockerfile in a private GitHub repository. When you connect this GitHub repository to Choreo, you can build the Dockerfile to pull the scheduled task implementation from the Docker image.",725
Scheduled Tasks,Deploy a scheduled task,"At the deployment stage, Choreo prompts you to specify the time interval at which it should run the scheduled task to execute the configured action.
Once you specify the time interval and proceed to deploy, Choreo starts the process of deploying an API to the default development environment as shown below:
Choreo runs a professional, enterprise-grade CI/CD process to deploy APIs to its runtime(data plane) clusters. Under the hood, the data plane of Choreo runs on a Kubernetes stack, benefitting from all its features such as auto-scaling, auto-healing, secret management, liveness, readiness checks, etc.
Once you deploy the scheduled task to the development environment, the system exposes it through an API Gateway with API security turned on.
When you deploy the scheduled task to the development environment, it is active in the developer environment. When you are ready to take the code to production, you can promote the deployment and enable the functionality for your consumers.
Choreo allows you to view the deployment logs through the **Deploy** view. Therefore you can troubleshoot and view the status of the builds and deployment.",240
Scheduled Tasks,Choreo environments,"Choreo provides a development environment and a production environment in two separate Kubernetes clusters by default. Once you have deployed the scheduled task to the development environment and verified whether it functions as expected, you can promote it to the production environment.
If required, you can change the time interval of the scheduled task before you promote it to the production environment.",73
Scheduled Tasks,Observe a scheduled task,You can assess the performance of your scheduled task by observing the success and failure rates of the requests sent to it. The observability view allows you to visualize the performance statistics via interactive graphs.,38
GraphQL APIs,GraphQL APIs,"Explore how you can easily design, develop, and manage GraphQL APIs in Choreo to implement your business API strategy.",25
GraphQL APIs,What is a GraphQL API?,"GraphQL (https://graphql.org) is a query language for APIs to fetch and persist data. A GraphQL API is a category of APIs that supports this query language.
A GraphQL API is an alternative for a REST API to address the following limitations experienced by REST API consumers:
- A REST API may need to send multiple requests to several endpoints to retrieve all the required data. A GraphQL API can achieve this via a single query. For example, a banking application has to fetch the phone number and the current account balance of an account holder. To achieve this, a REST API may need to send three requests to call three endpoints (e.g., `/customers/<id>` to fetch the initial data, `/customers/<id>/contactInfo` to fetch the phone number, and `/customers/<id>/balances` to fetch the current account balance).
    A GraphQL API can retrieve all these details via one query similar to the sample given below:
    ```
    query {
        customer (id: ""SIL182882762"") {
            contactInfo {
                phoneNo
            }
            balances(current)
        }
    }
    ```
    In this scenario, a single request by a REST API under-fetches data compared to a single request by a GraphQL API.
- In some scenarios, a REST API can over-fetch data. In the same example given above, a request sent by REST API to the `/customers/<id>/contactInfo` can result in fetching all the contact information in the array such as the phone number, work phone number, address, email, etc., whereas the application only needs the phone number. GraphQL allows you to avoid this by writing queries with specific data requirements.
GraphQL APIs consume fewer resources (such as internet bandwidth, system memory, etc.) by avoiding over-fetching and minimizing the number of requests it sends for a given purpose. Therefore, it is economical to consume GraphQL APIs instead of REST APIs for low-energy devices such as mobile devices.",518
GraphQL APIs,Develop,"To create a GraphQL you need to add a GraphQL component.
Choreo comes with the Web Editor which is an IDE designed based on Visual Studio Code for developers to implement API functionality. At present, developers can design GraphQL APIs in the Web Editor by writing code, and test the functionality via cURL commands before committing the design to a private/Choreo-managed GitHub repository. Once you commit the design, the GraphQL API is available in the Choreo Console, where you can deploy, test, and observe it.
!!! info
    Implementing the GraphQL APIs in the low-code mode is currently not supported.",135
GraphQL APIs,Lifecycle,"Once you implement a GraphQL API, you can build, test, and eventually put it into production. Choreo executes a CI/CD pipeline to manage the API lifecycle. Choreo stores the source code of APIs in a GitHub repository for the user account. This GitHub repository can be a Choreo-managed repository or a GitHub repository that you own.  It also provides the capability for developers to connect their own GitHub repositories containing the source code of their APIs. The CI/CD pipeline in Choreo takes an API through the complete process, starting from code checkout to compile, build, test, and finally deploy.",129
GraphQL APIs,Deploy,"Choreo runs a professional, enterprise-grade CI/CD process to deploy APIs to their runtime(data plane) clusters. The data plane of Choreo runs on a Kubernetes stack under the hood. Therefore, you can benefit from its features such as auto-scaling, auto-healing, secret-management, liveness and readiness checks, etc.
Once you deploy a GraphQL API to the development environment, it gets exposed through an API Gateway with API security enabled. At this time, Choreo provides a test URL for the API, which you can use to verify the functionality of the API.",129
GraphQL APIs,Choreo environments,"Choreo provides a development environment by default and a production environment in two separate Kubernetes clusters. Once you deploy an API to the development environment and verify its functionality, you can promote the API to the production environment.
Once you promote an API to production, Choreo provides a second URL that you can use in a production application to invoke the API.",75
GraphQL APIs,Test,"Once you deploy your GraphQL API, you can test it using the GraphQL Console. The GraphQL Console is an interactive UI that guides you to write queries and mutations to test the GraphQL API.
Choreo uses OAuth2.0 authentication to secure GraphQL APIs by default. Therefore, the GraphQL Console allows you to generate test keys to test the APIs.",77
GraphQL APIs,Observe,"Choreo allows you to visualize and monitor the performance of GraphQL APIs deployed on Choreo. Choreo has in-built support for viewing the overall status, latencies, throughput data, diagnostic data, and logs. Developers can efficiently detect and troubleshoot anomalies in GraphQL APIs using  Choreo Observability.
For more information about the observability capabilities of Choreo, see Observability.",86
Connect Your GitHub Repository to Choreo,Connect Your GitHub Repository to Choreo,"Choreo allows you to connect your own GitHub repository to maintain the source code of a component when you create any Choreo components. You can create a Choreo component using a Ballerina project or a service written in any language in a Docker container. By connecting your GitHub repository, you enable collaborative development for Choreo components. Furthermore, this lets developers keep the source repository within their control and adhere to enterprise-specific best practices and development guidelines such as checking pull requests, code analysis, styling preferences, etc.
This tutorial walks you through the steps to connect your own GitHub repository when creating a component. In this tutorial, you will connect your GitHub repository and use the REST API implementation in your GitHub repository to create a REST API in Choreo.",156
Connect Your GitHub Repository to Choreo,Prerequisites: Create a project,"Let's begin by creating a project as follows:
1. Sign in to the Choreo Console at https://console.choreo.dev.
2. Click the **+ Create Project** card from the landing page.
3. Enter a unique name and description for your project. In this tutorial, let's use the following values:
    **Name**        | COVID-19 Statistics
    **Description** | Maintain COVID-19 Statistics
4. Click **Create**. ",116
Connect Your GitHub Repository to Choreo,Connect your GitHub repository,"Let's connect your GitHub repository and use the REST API implementation in it to create a REST API component in Choreo: 
1. On the **Components** page, click **+Create** on the **REST API** card.
2. Enter a unique name and a description for the API. In this tutorial, let's enter the following values:
**Name**        | COVID-19 Statistics
**Description** | Retrieve COVID-19 Statistics
3. Click **Next**.
4. Provide authorization with your GitHub account by clicking  **Authorize with GitHub**. 
5. If you have not already authorized Choreo apps, click **Authorize Choreo Apps** when prompted.
6. Select a GitHub account, a repository that includes the implementation, the relevant branch, and the build preset (i.e., **Ballerina** or **Dockerfile**). 
7. Enter the following values based on the preset you selected above:
    - **Ballerina** preset
        - **Path**: Enter a valid path relative to the root of your repository that points to the implementation of the REST API. If you have not designed and implemented your REST API yet, you can connect an empty GitHub repository or a sub-folder and proceed to create the component. 
            !!! info
                You can create a component by connecting an empty GitHub repository for the **Ballerina** preset. However, you can only deploy it after developing and pushing a Ballerina implementation for the relevant component type.
    - **Dockerfile** preset:
        - **Dockerfile path**: Enter a valid path relative to the root of your repository that points to the Dockerfile. The path must include `- Dockerfile`. Choreo validates the **Dockerfile path** and checks if the given file name contains the word `Dockerfile` ignoring cases.
        - **Docker context path**: Enter a valid path relative to the root of your repository that points to the Docker project.
        - **OpenAPI file path (Optional)**: Enter a valid path relative to the root of your repository that points to the OpenAPI schema. Choreo validates the input to check if the given file name has one of the following extensions: *.yaml, *.yml, or *.json.
8. Click **Create**.
You have now successfully created your component by connecting your own GitHub repository.
Developers can collaborate via any of the following approaches:
- Use the same upstream repository to create a shared component in the same organization, develop, push changes to the respective tracking branch, and eventually send a pull request to the relevant branch.
- Create their forks from the shared upstream repository, connect to individual components, commit, and send pull requests to the upstream repository.
Once you collaborate and complete developing the REST API component, you can deploy and test it.",674
Connect Your GitHub Repository to Choreo,Migrate Choreo-managed repositories to your own GitHub repositories,"If you previously created components on Choreo without connecting your GitHub repository,  your code resides in a Choreo-managed repository. **Choreo will remove all Choreo-managed repositories and the relevant components created using them by the 31st of January, 2023**. Choreo will send the source code to the users via mail. Users can then use this source code, store it in their GitHub repositories and create new components. 
**If you have published any connectors for these components, Choreo will continue to keep them published**. Once you create a new version of the component, you can then publish a new version of the connector. However, any applications using the original version of the connector will have to use the new connector version to use the new REST API. To do this,  a user needs to change the  ServiceUrl (REST API URL) and the auth credentials (generated from the Choreo Developer portal) used by the client application to consume the connector.",207
Forecast Performance Metrics,Forecast Performance Metrics,"The Performance Analyzer tool is an AI-based tool that generates intelligent estimations of the performance of integration-based services and APIs based on historical data. The Performance Analyzer tool allows developers to obtain forecasts at development time using advanced machine learning techniques and mathematical performance models.
Traditionally, performance analysis includes performance debugging which involves measuring the performance of services by load testing them. The Performance Analyzer allows you to measure performance at the application development stage, significantly reducing the time and cost spent on performance debugging.
A component may have more than one execution path serving requests. The Performance Analyzer tool can analyze all the execution paths and determine the **performance-critical path**: the path that is estimated to take the longest time to process a single request.",152
Forecast Performance Metrics,Advantages of using the Performance Analyzer,"Making accurate performance estimations before releasing an application you have developed is important due to the following reasons:
- You can identify the performance-critical path of a component at development time. 
- The forecasts you obtain for individual connector actions help identify any bottlenecks in each execution path.
- You can detect any performance anti-patterns and low-quality code in your component implementation that impacts the overall performance. 
- When you create service-level agreements (SLAs) for your application, an accurate performance forecast allows you to provide valuable insights relating to the scalability of the application and the ways to optimize its performance.
- You can avoid missing significant performance characteristics when combining multiple applications, including external applications.
- You can correctly assess the cost and feasibility of running the application in a production environment.
- You can reduce the time and cost spent on debugging performance issues by eliminating or minimizing iterative load testing efforts.",191
Forecast Performance Metrics,Use the Performance Analyzer,"You can use the Choreo Performance Analyzer on the Web Editor in low-code mode. 

### Analyze the performance-critical path in real-time
To view the real-time analysis of the performance-critical path of your component, follow the steps below:
1. Sign in to the Choreo Console at https://console.choreo.dev. 
2. Navigate to your component and click **Overview** from the left pane. 
3. Click **Edit Code** to access the Web Editor.

#### Overall performance of the performance-critical path
On the low-code editor, you will see a bar with the summarized overall performance estimates for each resource function. By default, this banner displays the forecasted latency and throughput when the indicated user count range executes the performance-critical path. The upper bound of the user count range is set based on the availability of historical data. Since the Performance Analyzer tool derives these metrics in real-time,  any changes to the component will update the metrics in real-time. 
By default, the Performance Analyzer tool does not highlight the performance-critical path in the low-code diagram. Click  **Reveal performance-critical path** on the top banner to highlight it in green in the low-code diagram.

#### Latency estimates for individual API invocations in the performance-critical path
The Performance Analyzer tool displays the estimated latency for each API invocation in the performance-critical path as a banner next to the API invocation in the low-code diagram, as shown below. The Performance Analyzer tool derives these estimates based on the user count range that is indicated on the low-code editor, as a bar with the summarized overall performance estimates for each resource function.

### Analyze the performance of all execution paths
By default, the Performance Analyzer tool does not highlight the performance-critical path in the low-code diagram. Click **Reveal performance-critical path** on the top banner to highlight it in green. A pane opens on the right of the Web Editor. You can perform an in-depth performance analysis of the component in this pane. 

#### Execution paths
You can view all execution paths in the component in a tabular format listed on top of the **Performance Forecast** pane. The table shows the entries in descending order based on the time it takes to process a single request in each path.
The Performance Analyzer tool identifies the execution paths using the service invocations performed by each of them. If an execution path does not include any service invocation, then the latency of that path is assumed to be negligible.
You can select any execution path from the table. When you select an execution path, the Performance Analyzer tool will highlight the execution path on the low-code diagram. The estimated overall performance values displayed on the top banner will change based on the execution path selected.

#### Performance forecast graphs
The performance forecast graphs: the latency graph and the throughput graph for the selected path of execution are below the **Execution Paths** table in the **Performance Forecast** pane. These performance forecast graphs forecast how the latency and throughput may vary based on the number of users simultaneously accessing the component.
By analyzing these graphs carefully, you can gain a fair understanding of how well your component will scale with the increasing load.",695
Forecast Performance Metrics,Assumptions,"The Performance Analyzer generates forecasts based on the following assumptions:
- For service-based applications, the overhead of non-I/O operations (CPU-bound operations) is negligible compared to API calls to connectors. 
- The service under evaluation is deployed with sufficient resources and therefore is not a bottleneck.
- Sufficient historical data is available for each service operation or API for the AI models to derive an accurate estimation.",87
Policies,Policies,"Policies are units of business logic that a user can apply to slightly change the  `Request`, `Response`, or `Error` flow of an API invocation before reaching the backend or the client. For example, you can modify the response of an API invocation by adding a policy to the Response flow to transform the payload from JSON to  XML and to add a header in the response. 
Choreo includes a default set of policies covering most of the common use cases. You can attach one or more policies to the component implementation easily through the Choreo Console. Furthermore, you can attach multiple policies, swap, and rearrange them conveniently.
In Choreo, once you attach a mediation policy to a proxy, the deployment, internally, is a two-step process.
1. Deployment initiation.If the component to which you attached the mediation policy is new, the system creates and commits a new repository with the mediation service code based on the attached policies. This new service is referred to as the interceptor application. 
2. Deploying the API. Once the deployment initiation is complete, you can provide any configurations required and proceed to deploy. In this step, Choreo builds the generated interceptor application and pushes the Docker image to the Docker registry. Finally, Choreo deploys the interceptor application with the mediation service and the API Proxy.
 Depending on the flow to which the mediation policy is attached, the API invocation will undergo the respective behavioral modification as follows: 
 - In the request path, the requests that pass through the gateway reach the relevant component, and Choreo executes any attached policies to the resource's request path before sending it to the backend. 
- In the response path, the response messages from the backend are first received by the interceptor component, and Choreo executes any mediation policies attached to the `Response` flow or the `Error` flow. Then the response is forwarded to the client.
- In the event an error occurrs during the execution of policies or due to an internal error, the `Error` flow is executed and an error response is sent to the client.",440
Policies,Monitoring and troubleshooting the deployment,"You can check logs at each stage of the deployment in the console that opens on the right of the page. To open this console, click on a build from the **Build and Deployment History** in the **Build Area**.

#### Code Generation
This is the stage where the interceptor application is generated based on the mediation policies. In this stage, if there are any errors, the user can view them in the console. If the error is due to a user error, for example, an error related to the API definition, etc., based on the logs the user can fix the issue and retrigger a build.

#### Build
The build stage builds the interceptor application as a Docker image and deploys it in the respective environment. For logs related to the build, you can refer build logs of both Ballerina and Docker. 
Any errors that occur in this stage are not due to user error. If an error occurs, you need to retry the deployment.",204
Create a Policy,Create a Policy,"You can use policies to enforce some business logic on the Request, Response, or Fault flow of an API invocation. Using policies, you can make API invocations undergo slight behavioral modifications before reaching the backend. Similarly, you can modify the API response that a client receives. In Choreo, you can add an API Policy only to an API Proxy. 
A policy can be implemented as a Ballerina project and attached to an API Proxy. To create a policy, follow the steps given below: ",103
Create a Policy,Prerequisites,"1. Set up Ballerina 2201.2.0 or later (https://ballerina.io/learn/install-ballerina/set-up-ballerina/).
2. Open the ~/.ballerina/Settings.toml file and check if you have configured an access token to the Ballerina Central. If an access token is not configured in the file, follow the steps below: 
    1. Generate a token from https://central.ballerina.io/dashboard?tab=token (https://central.ballerina.io/dashboard?tab=token).
    2. Download the generated Settings.toml file and copy it to your local ~/.ballerina directory.
Alternatively, you can set the access token through the **BALLERINA_CENTRAL_ACCESS_TOKEN** environmental variable.
``` 
export BALLERINA_CENTRAL_ACCESS_TOKEN=<access-token> 
```",216
Create a Policy,Initializing a Ballerina project,"A mediation policy is a Ballerina project. You can use the template provided by Choreo to initialize a mediation policy project with all the required configurations.
Let's create a Ballerina project for the mediation policy using the **mediation.template** as the project template by issuing the following command:  
**Format:**

    ```
       bal new -t choreo/mediation.template:1.0.0 <policy-name> 
    ```
    
**Example:**

    ```
       bal new -t choreo/mediation.template:1.0.0 validateHeader 
    ```
 The Ballerina project you generated above has the following content: 
You can modify the `Ballerina.toml` and the `Package.md` files of the generated project as required. For example, you can update the **org**, the **package**, the package **version**, API documentation content, **keywords**, etc.",237
Create a Policy,Implement the policy,"Let's implement a policy to validate an incoming header in the request and the response as follows:
- **Request path**: If the request header is not present or if the validation fails, let's log an error and return a 403 Bad Request response to the client.
- **Response path**: Let's log a message to indicate whether the request is valid or not.
To implement the policy, open the the `Policy.bal` file in the Ballerina project and fill in/modify the generated policy stubs(i.e., request, response, or fault).

### Best practices 
The following are some best practices and additional information you can refer to when implementing your policy:
- Organize the source within the default module of the package. Do not add any additional modules.
- A policy implementation can contain any combination of flows. A generated project contains stubs for all three flows: `Request`, `Response`, and `Fault`. You can remove any stub that you do not require. For example, when you create a policy that re-writes the resource paths, you can remove the `Response` and `fault` stubs. 
- The HTTP request/response objects and the context record that gets passed as parameters to the policy functions are passed as references. Therefore, the changes you make to these values are persisted and are passed through all other policies. The request and the response accumulate all the transformations done to them via the attached policies.
- The following return types of the policy functions(flows) is unmodifiable:
    - **http:Response** - Returns an HTTP response when you terminate the mediation flow prematurely. For example,  in the in-flow sequence, the mediation sequence terminates before calling the backend. The mediation policy then sends an HTTP response to the client.
    - **false** - Returns `false` if you want to terminate the mediation sequence with a pre-defined response(on the Choreo side).
    - **error** - Returns an error if you want to terminate the mediation flow and transfer control to the fault flow. The fault flow would then construct an error response and send it to the client.
    - **()** - Returns () to signal the successful completion of the policy. Once the proxy has completed executing the policy, it starts to execute the next policy in the sequence.",500
Create a Policy,Publish the policy,"You can publish mediation policies to Ballerina Central. When you deploy the API after attaching policies, Choreo pulls these packages from Ballerina Central and bundles them into the interceptor application under the hood. To use policies in your APIs, publish them as public packages following the steps given below:
1. Package the policy before publishing it to Ballerina Central by issuing the following command:
    ``` 
        bal pack 
    ```
2. Publish the package to Ballerina Central by issuing the following command:
    ``` 
        bal push 
    ```
Once you publish the package, it will be listed in the policy list in the Choreo Console.",169
Create a Policy,Write unit tests,"Writing unit tests to test policy functions is similar to writing unit tests for a regular Ballerina function (https://ballerina.io/learn/test-ballerina-code/test-a-simple-function/). 
The policy function modifies the same request/response/context instance that you pass to it. Check the request/response/context instance after calling the policy function to verify these changes.",87
Create a Policy,Policy name and description,The `Package.md` file contains information about the policy. Choreo uses this information to render the policy configuring UI. This file is written in Markdown format.,36
Create a Policy,Policy versioning,"Choreo or mediation dependencies bump their major version when switching to a major update in the language (For example, from update 1 to update 2). There can be significant incompatibilities in these major versions. Therefore, we recommended versioning the policy package in a manner that the major version gets bumped when upgrading the Choreo/mediation dependency version to a major version.",76
Attach a Policy,Attach a Policy,"You can attach a policy to the `Request`, `Response`, or `Error` flow of the  REST API Proxy as follows:
1. Sign in to the Choreo Console at https://console.choreo.dev.
2. From the component list, select and click on the REST API Proxy component to which you want to attach the policy(s).
3. In the left navigation menu, click **Develop**  and then click **Policies**.
4. From the list of resources, expand the resource to which you want to attach the policy(s). 
5. Click **Attach Policy** for the relevant flow (i.e., `Request`, `Response`, or `Error`) to which you want to attach the policy.
6. From the **Policy List** panel on the right-hand side, select the policy you want to apply and click **Add**.
7. Click **Save**.",199
Attach a Policy,Configuring the policy to accept environment-specific parameters,"You can use policies that enable users to enter custom parameters and values. For example, Add Header policy requires the user to enter a header name and value when deploying the REST API Proxy. These parameters can be static values or environment-specific values. 
To add environment-specific values and policy parameters, follow the steps given below::
1. Sign in to the Choreo Console at https://console.choreo.dev.
2. From the component list, select and click on the REST API Proxy component to which you want to attach policies.
3. In the left navigation menu, click **Develop**  and then click **Policies**.
4. From the list of resources, expand the resource to which you want to attach the policy(s).
5. Click **Attach Policy** for the relevant flow (i.e., `Request`, `Response`, or `Error`) to which you want to attach the policy.
6. Add a policy that enables you to accept custom parameters and values from users. For example, the **Add Header** policy. 
8. Enter values for the required policy parameters when prompted. If you want to make a parameter a configurable variable, enter the value in `${<variableName>}` format. For example, `${name}`.
9. Click **Add** and then click **Save**.
10. To deploy the component, from the left navigation menu, click **Deploy** and then click **Config & Deploy**. When the interceptor application generation step is complete, you can provide the configurations. 
11. When prompted, provide the value and click **Save & Deploy**.",348
Manage Connectors,Manage Connectors,"A connector in Choreo is a component you or another party have:
1. Designed and developed in Choreo.
2. Exposed as an API in Choreo. 
3. Published as a connector in the Choreo Marketplace
A connector lets you share your APIs privately or publicly, promoting the reuse of APIs. Developers can use them when they design their components in the low-code view. A connector lets you share your APIs privately or publicly, promoting the reuse of APIs. Developers can use them when they design their components in the low-code view. Choreo allows you to create new connectors and maintain them easily.",134
Manage Connectors,Use a connector in your component design,"When you design your components in the low-code view, you can search and add the connectors displayed in the Marketplace as follows:
1. Open the component you are designing in the Web Editor and add a connector.
2. Search for the connector you need to add (e.g., World Bank), and click on it to add it.
If the connector is not available by default, you need to visit the vendor portal, make a payment or provide your Freemium account details if required, and access the required authorization tokens beforehand.
e.g., If you need to use the Azure SQL DB connector, create an Azure account and obtain an authorization token.",136
Manage Connectors,Update a private connector,"To update a private connector, you can republish the same connector version as follows:
1. Sign in to the Choreo Console at https://console.choreo.dev.
2. Navigate to your component and click  **Manage**.
3. Click **Lifecycle** from the left pane.
4. Click **Republish Connector**.",82
Manage Connectors,Update a public connector,"Public connectors are immutable. Therefore, we cannot modify and republish the already published connector version. You have to create a new component version to be able to publish a new connector version from it as follows:
1. Create a new GitHub branch for the new connector patch version in your GitHub repository. If you are using a Choreo-managed repo, follow the steps below:
    1.  Sign in to the Choreo Console at https://console.choreo.dev. 
    2. Navigate to your component and click **Overview** from the left pane. 
    3. Click the **Edit Code** button and navigate to the Web Editor to create a new branch through the terminal using the following commands: 
        ```
            git checkout -b <branch-name>
            git push origin <branch-name>
        ```
2. On the Choreo console, click **Deploy** on the left pane. 
3. Expand the **API version** dropdown and click **+ Create New**. 
4. Select the branch you created in step 1 as the **Associated Branch** and provide a new version, for example, 1.0.x. Click **Create** to create a new patch version of the component.
4. Continue to deploy the component by clicking **Deploy** on the **Build Area** pane.
5. Click **Manage** on the left pane.
6. Click **Lifecycle** on the left pane. 
7. Select the new version from the **API Version** drop-down.
8. Publish the API as a new connector.
9. Select the old API version from the **API Version** drop-down.
10. Click **Deprecate** and deprecate the previous API version.",423
Deploy Your Component,Deploy Your Component,"Deploying your component on Choreo makes it invocable. Once you have designed, tested, and committed the REST API, you can deploy it.
To deploy a component, follow the steps below:
1. Click the **Deploy** icon. 
2. **Automatic Deployment** is enabled by default. If you want do not want Choreo to automatically deploy the component after each commit that edits its implementation, you can disable automatic deployment,
3. Then in the **Build Area** card, click **Deploy Manually**.
    !!! info
        Choreo requires you to perform the first deployment of each component manually so that you can provide values for any configurable variables that the implementation may include.
2. You can view the progress of the deployment from the console.
Once you deploy the component, the **Development** card indicates that it is active.
Now you can test your deployed component to check if it is working as expected.",211
Deploy a Containerized Choreo Component,Deploy a Containerized Choreo Component,"Choreo allows you to deploy an application written in a wide range of language frameworks (for example, Java, Go, Nodejs, Python, PHP, etc.) on shared or private data planes when you create any of the following components:
- REST APIs
- Scheduled tasks
- Manual triggers
This guide walks you through the steps to deploy a sample containerized REST API component in Choreo.",84
Deploy a Containerized Choreo Component,Prerequisites,"To deploy a containerized component, you need a GitHub account with a repository that contains a Dockerfile. For this tutorial, you can fork and use the choreo-sample-apps repository (https://github.com/wso2/choreo-sample-apps).
The **Choreo GitHub App** requires the following permission:
 - Read access to issues and metadata
 - Read and write access to code, pull requests, and repository hooks
You can revoke access (https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/reviewing-your-authorized-integrations#reviewing-your-authorized-github-apps) if you do not want Choreo to have access to your GitHub account. Choreo needs write access only to send pull requests to a user repository. Choreo does not directly push any changes to a repository.",191
Deploy a Containerized Choreo Component,Create a component from a Dockerfile,"Let's add a containerized REST API component by following these steps:
1. Sign in to the Choreo Console at https://console.choreo.dev.
2. Create a project to add the REST API component. Connect Your Own GitHub Repository to Choreo tutorial.
3. On the **Components** page, click **Create** on the **REST API** card.
4. Enter a unique name and a description for the API. For this tutorial, let's enter the following values:
**Name**        | `Greetings` 
**Description** | `Sends greetings`
    !!! Info
        Leave the value for the **Access Mode** field unchanged.
        This field allows you to select whether you want the REST API to be publicly accessible or to be accessible only within Choreo. By default, the API is publicly accessible.
    Click **Next**.
6. Click **Authorize with GitHub** to allow the REST API to access your GitHub account. Once you perform the authorization, the **GitHub Account** field in the **Connect Repository** dialog box displays the GitHub account you authorized the REST API to access. 
8. Select the following values to connect the repository.
**GitHub Account** | Your GitHub account. If you want to add another GitHub account, you can expand the list, click **+ Add**, and repeat step 6. |select your GitHub account|
**GitHub Repository**        | You can authorize the REST API to access all the repositories in the selected GitHub account or select one or more repositories that you want to allow the REST API to access. For this tutorial, you can select your fork of the choreo-sample-apps repository |`choreo-sample-apps`
**Branch** |The branch of the repository |`main`
**Build Preset** | Determines the implementation of the component: Ballerina or any other language as a Docker container|`Dockerfile`
**Dockerfile path**|The path to your Dockerfile. This path is defined relative to the repository root.e.g., If the Dockerfile is at the repository root, the value for this field for a mono-repo is `service-one/Dockerfile`.  | `nodejs/rest-api/Dockerfile`
**Docker build Context Path** |The Docker build context path. To include the repository root, leave the default `**.**` value. | `nodejs/rest-api/`
**Port** | The port at which your service is running. | `8080`
**OpenAPI Filepath** | The path to an OpenAPI specification (in yaml/json) relative to the repository root. If you do not specify a path, the system auto-generates a default `allow-all` specification. | `nodejs/rest-api/openapi.yaml`
    !!! Tip 
        - The repository you select will be validated when you run a build for it.
        - If you want to add another GitHub repository from your account, you can expand the list, click **+ Connect More Repositories**, and repeat step 6.
9. Click **Create**.
    The REST API deploy section opens on a separate page.
    - If you click the **Overview** icon, you will see the default OpenAPI specification instead of the specification you specified in the **OpenAPI Filepath** field. This is because you need to build and deploy the REST API to execute the required commands in the Dockerfile that will generate it.
    - To select a specific version of the REST API you want to deploy, click the first card in the **Build Area** section, select the required commit in the **Configure & Deploy** pane, and click **Select**.         
    - If you want to make changes to the build configurations you previously defined, follow these steps: 1. Click the **Build Configurations** card in the **Build Area** section. 2. Make the required changes in the **Build Configurations** pane. 3. Click **Save**.        
    - When you create a Ballerina component, Choreo will allow you to develop it and define variables for which you can provide values when you deploy it. However, when you bring your own non-Ballerina component, the system runs the build via the Dockerfile. If you want to define configurable values before deploying, you can configure them in the DevOps Portal.
You have successfully added a Dockerfile-based REST API component from a Dockerfile. Now let's build and deploy it.",1054
Deploy a Containerized Choreo Component,Build and deploy,"To implement the REST API, you need to build and deploy it. When you trigger the build you execute the commands in the selected Dockerfile to apply the required configurations to the REST API.
To build and deploy the REST API, follow these steps:
1. On the **Deploy** page, click **Build and Deploy**.
    !!! note
        Deploying the REST API component may take a while. You can track the progress by observing the logs.
    Once the deployment is complete, the deployment status changes to **Active**. The **Invoke URL** field displays the URL via which you can invoke the REST API.
2. Check the deployment progress by observing the console logs on the right of the page.
    You can access the following scans under **Build**.
     - **The Dockerfile scan**: This scans the Dockerfile for a user ID and fails the build if no user is assigned to the Docker container.
     - **Container (Trivy) vulnerability scan**: This detects vulnerabilities in the Dockerfile-based image and in the third-party packages that the source code uses. If you click **Container (Trivy) vulnerability scan**, the details of the vulnerabilities open in a separate pane. If this scan detects critical vulnerabilities, the build will fail.
        !!! info
            If you want to bypass these vulnerabilities, you need to run Choreo on a private data plane.
You can test, manage, and observe this REST API you created from a Dockerfile the way you would a Ballerina component.",359
Deploy a Containerized Choreo Component,Manage the deployment,"If you want to view Kubernetes-level insights to carry out a more detailed diagnosis of this Dockerfile-based REST API, click **DevOps Portal** in the top menu.",39
Open API Console,Open API Console,"Choreo allows you to test your APIs using the integrated OpenAPI Console, the generated cURL command, or by integrating Postman to Choreo. Once you have created an API and deployed it, it is ready to be tested. ",50
Open API Console,Test your REST API,"!!! note
    If you are on the **Deployment** tab, click **Test** in the **Development** card and continue from step 4 onwards. 
1. Sign in to the Choreo Console at https://console.choreo.dev/.
2. In the component list, find the API component that you want to test and click it. 
3. To open the test view, click the **Test** on the left navigation menu.
4. Click **Try it out**.
5. Enter any parameter values if necessary.
6. Click **Execute**.
    You can view the response body under **Responses**.
Congratulations! You have now successfully created and tested a REST API in Choreo!",163
cURL,cURL,"Choreo allows you to test your APIs using the integrated OpenAPI Console, the generated cURL command, or by integrating Postman to Choreo. Once you have created an API and deployed it, it is ready to be tested. 
You can follow the steps below to test your REST API using the Choreo-generated cURL command :",73
cURL,Test your REST API,"!!! note
    If you are on the **Deployment** tab, click **Test** in the **Development** card and continue from step 4 onwards. 
1. Sign in to the Choreo Console at https://console.choreo.dev/).
2. From the components list, find the API component you want to test and click it. 
3. To open the test view, click the **Test** on the left navigation menu and then click **cURL**.
4. Select the method, and configure the parameters, headers, and body required to invoke the API method selected.
6. Copy the cURL command generated under **Command**.
You can use this copied cURL command and test the API method on a cURL client.
Congratulations! You have now successfully created and tested a REST API in Choreo!",182
Manage,Manage,"Choreo's API Management capabilities allow you to manage your APIs through the Choreo Console. You can manage the lifecycle, consumers, and documents, secure your backends by applying rate-limiting policies through usage plans, define permissions using scopes, configure security, rate-limiting, and visibility settings, and define any properties. ",71
Overview,Overview,"The overview of the **Manage** page gives you a bird's eye view of how you currently manage your API component. You can view the lifecycle status of your component, the number of consumers, the security scheme configured, and the usage plan applied to the API. The **Overview** pane also lists the environment(s) of the API.",71
Lifecycle,Lifecycle,"Choreo allows you to manage the lifecycle of the API through the Choreo Console. A state represents the stage of an API in the process from creation to retirement. You can apply any of the six API lifecycles states (i.e., created, pre-released, published, blocked, deprecated, and retired) while adhering to their respective lifecycle flows.
When you publish an API, you can also publish a connector for that API to make it available on the Choreo Marketplace.",107
Consumers,Consumers,"The **Consumers** pane shows us the applications that have subscribed to your API. You can manage access to your API by blocking or unblocking these applications through the Choreo Console. The **Consumers** pane lists the applications, and for each application, it shows the usage tier, owner, and status: blocked or unblocked.",70
Documents,Documents,API documentation is vital in helping API consumers understand the functionality of your API and is beneficial to marketing the API. The Choreo Console allows you to add a document on the fly by entering a name and the API contents. You can also preview the document and verify if it is suitable for publishing.,60
Usage Plans,Usage Plans,"You can secure your API backends by applying rate-limiting policies through the **Usage Plans** pane, typically in cases such as the following: 
- To protect your APIs from common types of security attacks, such as certain types of denial of service (DOS) attacks
- To regulate traffic according to infrastructure availability
- To make an API, application, or resource available to a consumer at different levels of service, usually for monetization purpose
Choreo allows you to apply a usage plan on the API that is not bound to an environment or build. Choreo supports the following usage plans by default:
- Bronze - 1000 requests per minute.
- Silver - 2000 requests per minute.
- Gold - 5000 requests per minute.
- Unlimited - unlimited requests per minute.",162
Permissions,Permissions,"Permissions allow you to attach scopes that enable fine-grained access control to your API resources. You can create a scope entry by giving a scope name. You can then select and apply these scopes to the individual resources in your API. On the identity provider, a scope will have a role mapped to it. A role specifies the permissions associated with it. When you invoke the API resource with a specific scope, the access to your API resource is controlled based on the permissions associated with the role. ",103
Settings,Settings,"The Choreo Console allows you to define security, rate-limiting, and visibility settings for an API. You can configure the following settings: 
- **Access mode** - Configure API access as internal or external. 
- **API Visibility** - Configure API visibility as private or public.
- **CORS configuration** - Enables CORS configurations and provides necessary CORS headers.
- **Application level security** - This determines the type of security used to safeguard this API.  You can secure your APIs with OAuth2, any other available security scheme, or both. If the OAuth2 option is selected, that API will need a valid OAuth2 token for successful invocation.
- **Operations Configuration** - Configure rate limiting to your API in Choreo per API operation.",171
Properties,Properties,"You can view and edit the API properties (i.e., the business owner's name and email and the technical owner's name and email) from the Choreo Console.""",36
Lifecycle,Lifecycle,"Managing the API lifecycle is one of the main factors in API management. An API lifecycle has predefined states. These states represent the different stages the API transitions from creation to retirement. Choreo has six lifecycle states: created, pre-released, published, blocked, deprecated, and retired.",63
Lifecycle,API lifecycle states,"The following lifecycle states are available in the default API lifecycle and applicable for APIs.
**CREATED**         | The API is created but is ready for consumption.| The API is not published. Therefore, it is not visible to subscribers in the Developer Portal.
**PRE-RELEASED**    | A prototype is created for early promotion and consumer testing. You can deploy a new API or a new version of an existing API as a prototype using the PRE-RELEASED state. It gives subscribers an early implementation of the API.|The API is published in the Developer Portal as a pre-release.
**PUBLISHED**       | The API is ready to be used by users in the Developer Portal.| The API is visible in the Developer Portal and available for subscription.
**BLOCKED**         | The API is temporarily blocked from being used. The API can be PUBLISHED from the BLOCKED state.| Access to the API is temporarily blocked. Runtime calls are blocked and the API is not shown in the Developer Portal anymore.
**DEPRECATED**      | The old version of the API is DEPRECATED when a newer version of the API is created and PUBLISHED.| When an API is deprecated, new subscriptions are disabled. However, the API is still deployed and is available at runtime to existing subscribers. Existing subscribers can continue to use it as usual until the API is retired.
**RETIRED**         | The API is no longer in use and has been moved to the RETIRED state.| The API is unpublished and deleted from the Developer Portal.",367
Lifecycle,Manage API lifecycle,"The lifecycle of an API can be managed by the users with publishing privileges, using the Choreo Console. 
Follow the instructions below to manage the API lifecycle appropriately:
1. Sign in to the Choreo Console at https://console.choreo.dev/.
2. Select and click on the API component you want to test from the components list. 
3. in the left panel, click the **Manage** icon to open the test view.
4. In the left pane, click **Lifecycle**.
5. Click on the lifecycle state change buttons to change the lifecycle state.",133
Developer Portal,Developer Portal,"Application Programming Interfaces (APIs) are designed and built by API developers to make them available for repeated consumption for API consumers. The Choreo developer portal makes it easier for consumers to find and connect to thousands of APIs. Typically, an application developer who may be internal or external to your organization would want to consume the APIs published on the developer portal to develop software. The developer portal makes it easy for consumers to find, consume APIs, and manage subscriptions to these APIs. ",97
Developer Portal,Consume API,"API Consumption is the process of discovering the API, subscribing to the API, generating the necessary keys, and finally invoking the API. Choreo's developer portal makes it easy for consumers to consume APIs to develop their software with an accelerated time-to-market.
Choreo, by default, adopts OAuth 2.0 authentication. To consume an API in Choreo, a consumer needs to generate an OAuth 2.0 access token. The developer portal allows users to generate an access token per application: a logical grouping of subscriptions. 
Choreo also allows consumers to test the API in the developer portal through its interactive OpenAPI console. Consumers could then use a test key generated in the developer portal and invoke the API and evaluate the response. ",157
Developer Portal,Discover APIs,"APIs need to be discoverable for consumers to find the API that best matches their requirements. The Choreo developer portal makes it easy for consumers to discover APIs with comprehensive search functionality and contextual categorization based on tags. 
For an API to be visible on the developer portal, the API publisher needs to publish the API to the developer portal. API visibility (public or private) is also controlled by the API Publisher when the API is published. Choreo displays visible APIs on the developer portal in the order of creation, with the most recent at the top by default.",117
Developer Portal,Subscribe to APIs,"Consuming an API on the Choreo developer portal involves subscribing to the API. API subscriptions are grouped logically by applications. To invoke an API, you need to generate an access token. A consumer can generate an access token per application. Therefore, for an API consumer to invoke an API: the consumer needs to subscribe to the API through an application and generate a key for the application. 

### Applications
An application is a logical representation of a physical application such as a mobile app, web app, device, etc. An API subscription is created, authenticated, and managed through an application.

### Authentication
The subscription process is authenticated in Choreo using OAuth 2.0 by default. The authentication keys are generated, by Choreo, for each application per gateway environment (Production or Sandbox). It is important to note that the API consumer should use the correct access token for the respective gateway environment when invoking the API.

### Business plans
Developers need to select a business plan for each API subscription. The business plan determines the number of requests allowed for the API per minute. Therefore, this is also the rate limit that applies to a subscription.",240
Developer Portal,Test APIs,"Before using an API for development, the API consumer may want to test its capabilities. Choreo provides in-built capabilities to test the APIs using the in-built OpenAPI console. The in-built OpenAPI console is an interactive UI where you can easily test your API Proxy in the environments you deploy them in by selecting the required environment. Choreo, by default, uses OAuth 2.0 authentication. Therefore, the OpenAPI console gives you the option to generate your test keys to test the APIs. Once you meet the prerequisites, you can test the different resources you defined by specifying parameters if needed. ",127
Manage Applications,Manage Applications,"An application in Choreo is a logical representation of a physical application such as a mobile app, web app, device, etc. To consume an API in Choreo, you need to create an application that maps to your physical application and then subscribes to the required API over a usage policy plan that gives you a usage quota. A single application can have multiple subscriptions to APIs. Using the consumer key and consumer secret, you can generate an access token that you can use to invoke all the APIs subscribed to the same application.
This section will walk you through the steps to create an application in Choreo.
Let's get started!",131
Manage Applications,Create an application,"Follow the steps below to create an application on Choreo:
1. Sign in to Choreo Developer Portal at https://devportal.choreo.dev. Alternatively, click the Developer Portal link on the Choreo Console header.     
2. Click **Applications** and then, click **+Create**.
3. Enter the application name and select the usage policy. Optionally, add the application description. 
4. Click **Create**.
You are redirected to the application overview page. You can view the throttling tier, the token type, workflow status, and the application owner of the API.",136
Manage Applications,Generate keys,"Choreo provides an OAuth 2.0 bearer token-based authentication for API access. An API access token/key is a string that is passed as an HTTP header of an API request to authenticate the API access.
Once you create an application in Choreo, you can then generate the credentials for it. When you generate the credentials for the first time, Choreo gives you a consumer key and the consumer secret for the application. The consumer key becomes the unique identifier of the application, similar to a user's user name, and is used to authenticate the application or user. You can use this consumer key and consumer secret to generate an API access token by invoking the token endpoint. You can also revoke the access token by invoking the revoke endpoint. For testing purposes, you can generate a test token via the UI. However, we strongly recommend that you do not use the test token in your production environment.
This section will walk you through the steps to generate an API access token in Choreo. 
Let's get started!

### Access token for production 
Depending on your use case, you can generate an access token using one of the two grant types available in Choreo: Client Credentials and Token Exchange. 
!!! note
    We recommend you use the **Token Exchange** grant type to obtain an access token **for production use** and use the **Client Credentials** grant type **for testing purposes**. 
Token Exchange grant type requires you to pass a subject_token as a parameter in the token invocation call. You can obtain a subject token (id token) by using the `open_id` scope. Follow the steps below to generate an access token from the IdP along with the subject token:
1. Register the IdP in Choreo by following the steps in the section add an external IdP.
2. Generate a token from the registered IdP with the `openId` scope and retrieve the `id_token` from the token response.  
    ``` json tab=""Format""
        {""access_token"":""<access__token>"",""refresh_token"":""<refresh_token>"",""scope"":""openid"",""id_token"":""<id_token>"",""token_type"":""Bearer"",""expires_in"":3600}
    ```
3. Sign in to Choreo Developer Portal at https://devportal.choreo.dev. Alternatively, click the Developer Portal link on the Choreo Console header. 
4. Click **Applications**.
5. In the left pane, click **OAuth 2.0 Tokens**.
6. Expand the **Advanced Configurations** section and review the options. 
    - **Grant Types:** The grant types used to generate the access token. Keep Token Exchange and Refresh Token grant type selected.
    - **Public Client:** Identify the application as a public client to allow authentication without a client secret. You can use this for applications running on a browser or mobile device. 
    - **Application acces   s token expiry time:** The access token expiry time (seconds).
    - **Refresh token expiry time:** The refresh token expiry time (seconds).
    - **ID token expiry time:** ID token expiry time (seconds).
7. Click **Generate Credentials** to generate the credentials for the application for the first time. Copy the **Consumer Key** value.
8. Generate an access token by invoking the token endpoint using the Token Exchange grant type as follows: 
replace the `<application_consumer_key>` with the **Consumer Key** you copied at step 7 and replace `<idp_id_token>` with the **id_token** value you obtained at step 2: 
    ``` java tab=""Format""
    curl -k -X POST https://sts.choreo.dev/oauth2/token -d ""client_id=<application_consumer_key>"" -d ""subject_token_type=urn:ietf:params:oauth:token-type:jwt"" -d ""grant_type=urn:ietf:params:oauth:grant-type:token-exchange"" -d ""subject_token=<idp_id_token>""
    ```
    ``` java tab=""Example""
    curl -k -X POST https://sts.choreo.dev/oauth2/token -d ""client_id=ciwnWuwZfbcdzBUcnkhKvi_mcBUa"" -d ""subject_token_type=urn:ietf:params:oauth:token-type:jwt"" -d ""grant_type=urn:ietf:params:oauth:grant-type:token-exchange"" -d ""subject_token=eyJhbGciOiJFUzI1NiIsImtpZCI6IjE2In0.eyJhdWQiOiJodHRwczovL2FzLmV4YW1wbGUuY29tIiwiaXNzIjoiaHR0cHM6Ly9vcmlnaW5hbC1pc3N1ZXIuZXhhbXBsZS5uZXQiLCJleHAiOjE0NDE5MTA2MDAsIm5iZiI6MTQ0MTkwOTAwMCwic3ViIjoiYmNAZXhhbXBsZS5uZXQiLCJzY3AiOlsib3JkZXJzIiwicHJvZmlsZSIsImhpc3RvcnkiXX0.JDe7fZ267iIRXwbFmOugyCt5dmGoy6EeuzNQ3MqDek9cCUlyPhQC6cz9laKjK1bnjMQbLJqWix6ZdBI0isjsTA""
    ```
    ```JSON tab=""Response""
        {
        ""access_token"": ""eyJ4NXQiOiJNV1E1TldVd1lXWmlNbU16WlRJek16ZG1NekJoTVdNNFlqUXlNalZoTldNNE5qaGtNR1JtTnpGbE1HSTNaRGxtWW1Rek5tRXlNemhoWWpCaU5tWmhZdyIsImtpZCI6Ik1XUTVOV1V3WVdaaU1tTXpaVEl6TXpkbU16QmhNV000WWpReU1qVmhOV000Tmpoa01HUm1OekZsTUdJM1pEbG1ZbVF6Tm1FeU16aGhZakJpTm1aaFl3X1JTMjU2IiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJiNWViODFkMC01ZTMxLTQwZDgtYWY0MS03OWMwMjJlNTRhNTciLCJhdXQiOiJBUFBMSUNBVElPTl9VU0VSIiwiYXVkIjoibzRUWGxLQnowYWVJNEJ0d2NjY0V4bnVyNENVYSIsIm5iZiI6MTY2Mzg0MTM5MiwiYXpwIjoibzRUWGxLQnowYWVJNEJ0d2NjY0V4bnVyNENVYSIsInNjb3BlIjoiZGVmYXVsdCIsIm9yZ2FuaXphdGlvbiI6eyJ1dWlkIjoiZWMwZDE5OTgtZTRkNS00NjRlLWFjODgtOTg4ODM5NTYwZDVkIn0sImlzcyI6Imh0dHBzOi8vc3RzLmNob3Jlby5kZXY6NDQzL29hdXRoMi90b2tlbiIsImV4cCI6MTY2Mzg0NDk5MiwiaWRwX2NsYWltcyI6eyJhdXQiOiJBUFBMSUNBVElPTl9VU0VSIiwiYXV0aGVudGljYXRlZF9pZHAiOiJHb29nbGUiLCJuYW1lIjoid3NvMmUiLCJnaXZlbl9uYW1lIjoid3NvMiIsImZhbWlseV9uYW1lIjoid3NvMiIsImVtYWlsIjoid3NvMiJ9LCJpYXQiOjE2NjM4NDEzOTIsImp0aSI6ImM0MmRhNmM5LTYxYjEtNDUwNi1hMmYyLWY4OGE5MjQzNjk1MiJ9.M8FqUMDB1uvRTbz-AAxbl9af_72BLrSnTomGwasCzK4qRwVtV7MENLXFVzTZMW0ayBjPDQ8QeTmaky2LwAFKf0AYdGMtBYL0VLVWtBND7RCip_gxpa1k-Z5V4Cl5qcvKuLpySyE7E2QQqR9lPIHE-bm70nyWQheNMCEnPAKihyP772AEn3xRobHFGB_sidVuRAQm815GFE56NovKeBUM1YLmdnUgIrL1B9ho2q0g8aAI7959ORy9xQXLqxcYN-rd8uUnY5jWXPzxJHDDaozgHUK02IDKx0a-9Bf1Gy2Hj0DSQFRWZbPpfq7oMzCeRprqCYYkPkTjOz-LpyE9Ri-xTZNRbm7hua5PrRJjDD_EbsT8zYolRvIlwl7GcQOQuOtyxS4l_hQmb3DDmyFouv_P4Aknse4FvD8mSeXmvaTelyS5hBp0KNAoxkQBrRVgHVv_Jjyt2s9FwDhmLl4uS46x5Ca58X_wU6kEBP2hmfa98JHcfklog3gsxTm0T0JZlGs23zNqaf-ApC7NU9hWVZ6fwIX3CUzZNZmhF4caNrLJEqUnuxB5fHrHiwMNnoXf3WAILHj5gJPZo9OG18yymIdbRjHYrpD1ZQihIkPBTeMXwfRWIMDfBD3ezDKajktKqM8w1E-sFuGLHWyCqREN4XWA_jcZ6766BtTareAfKH171Ok"",
        ""refresh_token"": ""a23h07f9-6ce5-3b7a-9d12-00e7f82f4f46"",
        ""issued_token_type"": ""urn:ietf:params:oauth:token-type:jwt"",
        ""scope"": ""default"",
        ""token_type"": ""Bearer"",
        ""expires_in"": 3600
        }
    ```
    !!! tip
        Save the refresh token and access token since you won't be able to view it again.  

### Access token for testing
You can generate an access token for testing using the Choreo UI by following the steps below:
1. Sign in to Choreo Developer Portal at https://devportal.choreo.dev. Alternatively, click the Developer Portal link on the Choreo Console header. 
2. Click **Applications**.
3. In the left pane, click **OAuth 2.0 Tokens**.
4. Expand the **Advanced Configurations** section and review the options. 
    - **Grant Types:** The grant types used to generate the access token.
    - **Public Client:** Identify the application as a public client to allow authentication without a client secret. You can use this for applications running on a browser or mobile device. 
    - **Application access token expiry time:** The access token expiry time (seconds).
    - **Refresh token expiry time:** The refresh token expiry time (seconds).
    - **ID token expiry time:** ID token expiry time (seconds).

5. Click **Generate Credentials** to generate the credentials for the application for the first time. Once you generate the keys, you can find the application's consumer key and consumer secret. 
    !!! info
        You can use the UI to generate a test token using the consumer key and consumer secret for the application, only for test purposes. We strongly recommend **NOT** using this token in your production environment.
6. Click **:// CURL** to copy the cURL command template for generating the access token. You can generate an API access token by adding the consumer key and consumer secret to the URL and invoking the token endpoint.
  
### Renew an access token using the refresh token grant type
!!! note
    - To use this grant type, you will need the refresh token you received when you generated your current access token.
    - Your application must have the **Refresh Token** grant type enabled.
    - You can use a refresh token only once.
You can use a refresh token to obtain a new access token when your current access token expires or when you need to renew the access token due to security reasons. You need to use the Refresh Token grant type for this purpose. 
To generate a new access token and a new refresh token, you can invoke the Token API by replacing the `<refresh-token>` with the refresh token you received with the access token and replacing `<base64(consumerKey:consumerSecret)>` with the application's **Consumer Key** value and **Consumer Secret** value as follows:
``` java tab=""Format""
curl -k -d ""grant_type=refresh_token&refresh_token=<refresh-token>"" -H ""Authorization: Basic <base64(consumerKey:consumerSecret)>"" -H ""Content-Type: application/x-www-form-urlencoded"" https://sts.choreo.dev/oauth2/token
```
``` java tab=""Example""
curl -k -d ""grant_type=refresh_token&refresh_token=3154090c-37f1-3268-90f9-8bd84daf135c"" -H ""Authorization: Basic UXk3RUZfVEtMbEVLWTlVRFpiWHVscVA4ZVVBYTpKSWN3VTlIX1hGUFdTcW1RQmllZ3lJUzRKazhh"" -H ""Content-Type: application/x-www-form-urlencoded"" https://sts.choreo.dev/oauth2/token
```
``` java tab=""Response""
{
    ""scope"":""default"",
    ""token_type"":""Bearer"",
    ""expires_in"":3600,
    ""refresh_token"":""7ed6bae2b1d76c041787e8c8e2d6cbf8"",
    ""access_token"":""b7882d23f1f8207f4bc6cf4a20633ab1""
}
```
The above API response grants you a new access token and a refresh token.",3762
Manage Applications,Grant types,"Choreo authentication is based on OAuth2.0. In OAuth 2.0, grant types are methods that allow client applications to obtain an access token depending on the type of the resource owner, the type of the application, and the trust relationship between the authorization server and the resource owner. 

### Refresh token grant
A refresh token is a token that you can use to get a new access token when your current access token is expired or when you need a new access token. You can use the refresh token grant type for this purpose. Issuing a refresh token is optional for the authorization server. If the authorization server issues a refresh token, it includes it in the response with the access token. You can use this refresh token and send it to the authorization server to obtain a new access token. Choreo's default authorization server, Asgardeo, issues refresh tokens for all other grant types other than the **client credentials** grant type, as recommended by the OAuth 2.0 specification.
!!! note
    - Keep your refresh token private, similar to the access token. 
    - The process to get a new access token using the Refresh Token grant type requires no user interaction.

### Token exchange grant 
Choreo supports the token exchange grant type. This grant type allows the client to obtain a Choreo access token by providing a JWT issued by an external IdP. The token exchange grant type uses the protocol defined in the OAuth 2.0 token exchange specification. The OAuth 2.0 token exchange specification describes how you can request and obtain security tokens from OAuth 2.0 authorization servers. 
To exchange a JWT issued by an external IdP for a Choreo access token, you must send a request to the Choreo token endpoint with the JWT in the request body. Upon successful authentication, validation of the request takes place, and the corresponding IdP configuration is retrieved using the issuer. Next, the subject token is validated. Successful validation generates and returns a Choreo access token.",428
Manage Applications,Revoke access tokens,"In the case of theft, security violation, or precaution, Choreo allows an admin to revoke an access token via the revoke token endpoint. You can use a utility like a cURL to invoke this endpoint and revoke your access token.  
1. Sign in to the Choreo Developer Portal at https://devportal.choreo.dev. Alternatively, click **Developer Portal** on the Choreo Console header. 
2. Click **Applications**.
3. In the left pane, click **OAuth 2.0 Tokens**.
    You will find the **Consumer Key** (client ID), **Consumer Secret** (client secret), **Token Endpoint**, and **Revoke Endpoint** listed here. You can use these values to revoke the access token. 
The parameters required to invoke the revoke token endpoint are as follows:
-   `access_token_to_be_revoked` - The access token to be revoked
-   `<base64 encoded (consumerKey:consumerSecret)>` - Use a base64 encoder to encode your consumer key and consumer secret. Choreo does not recommend the use of online base64 encoders for this purpose.
- `<consumerKey>:<consumerSecret>` Thereafter, enter the encoded value for this parameter.
    ``` tab=""Format""
        curl -k -v -d ""token=<ACCESS_TOKEN_TO_BE_REVOKED>"" -H ""Authorization: Basic <base64 encoded (consumerKey:consumerSecret)>"" -H ""Content-Type: application/x-www-form-urlencoded""  https://sts.choreo.dev/oauth2/revoke
    ```
    ``` tab=""Examples""
        curl -k -v -d ""token=a0d210c7a3de7d548e03f1986e9a5c39"" -H ""Authorization: Basic OVRRNVJLZWFhVGZGeUpRSkRzam9aZmp4UkhjYTpDZnJ3ZXRual9ZOTdSSzFTZWlWQWx1aXdVVmth"" -H ""Content-Type: application/x-www-form-urlencoded"" https://sts.choreo.dev/oauth2/revoke
    ```",546
Test an API,Test an API,"Before using your API in production, you can test it using the integrated console in Choreo. Once you deploy your API in the required environment, an API consumer can use the application credentials, generate an OAuth 2.0 token, and invoke the API to test its functionality by providing values for the required parameters. 
This guide will take you through the steps to test an API in Choreo. 
1. Sign in to Choreo Developer Portal at https://devportal.choreo.dev. Alternatively, click **Developer Portal**  on the Choreo Console header. 
2. Click **APIs**.
3. Select an API you want to test and click **Try Out** on the card. In this case, skip step 4. Alternatively, you can click on the API and follow step 4. 
4. In the left pane, click **Try Out**.
5. Select the required environment from the **Environment** list.
6. From the **Subscribed Application** list, select the application you used to subsribe the API to. To learn how to subscribe to an application, see Manage Subscriptions. 
7. Click **Get Test Key** on the **Access Token** field to generate a test access token. To learn more about access tokens and generating tokens for production usage, see Manage Applications.
8. Next, expand a resource you want to test by clicking on it.
9. Click **Try it Out** to enable the resource to be tested.  
10. Fill in values for the required parameters and click **Execute**.
11. Once Choreo executes the request, you can view the response in the Choreo Console.  ",364
Marketplace,Marketplace,"The Marketplace is an interface provided by Choreo that allows the reuse of APIs by publishing them as connectors. It offers a range of default connectors and triggers that you can use to design your Cloud-native applications. You can purchase them, acquire them via a Freemium account, or find them free of charge. Similarly, you can publish an API or a trigger you developed to be purchased, acquired via Freemium or used free of charge by other Choreo users.
By enabling the reuse of APIs, Choreo addresses the need of modern businesses to focus more on developing applications with unique functionality, and save resources by acquiring the components they need from another party who has already developed them instead of creating them from scratch.
Let's explore the Marketplace.",153
Marketplace,Access the Marketplace,"To access the Marketplace, open the Choreo Console and click **Marketplace** in the left navigator.
The Marketplace opens displaying the pre-built connectors designed and published by Choreo. 
If you want to view the triggers published by Choreo, click on the **Triggers** tab.
If you want to filter the connectors and triggers published by your organization, click **My Organization** under **Filter By**.
In addition to the connectors and triggers by Choreo displayed above, you can find a range of connectors and triggers designed and published by other vendors. Let's proceed to the next sections to find the connectors and triggers that meet the requirements of the applications you build.",146
Marketplace,Filter by category,"If you want to filter connectors and triggers by a specific domain, click on the required category (e.g., Finance), and then click on the required subcategory (e.g., Accounting).
The results appear filtered by this selection as shown below.",52
Marketplace,Filter by price,"To filter connectors and triggers based on whether they are free, acquirable via Freemium, or paid, select the required checkbox under",27
Marketplace,Search for connectors/triggers,You can search for the required connector via the **Search field at the top of the page.,19
Marketplace,View connector/trigger details,"Once you populate the Marketplace page by filtering or searching for connectors and triggers, you can view the following for each connector/trigger in the list:
- A brief description of the functionality
- A label indicating the category
- A label indicating whether the connector/trigger is free, acquirable via Freemium, or paid
- The vendor
- The date on which it was published
- The number of instances the connector/trigger is used
You can also sort the list by the newest or the most used connectors/triggers.
If you want to view more information about a specific connector on the list, click on it. This directs you to an overview page with information about versions and compatibility, and links for reporting issues, accessing API documentation, contacting the vendor, etc.",160
Marketplace,Use a connector in your component design,"When you design your components in the low-code view, you can search and add the connectors displayed in the Marketplace as follows:
1. Open the component you are designing in the VS Code Editor and add a connector.
2. Search for the connector you need to add (e.g., World Bank), and click on it to add it.
If the connector is not available by default, you need to visit the vendor portal, make a payment/provide your Freemium account details if required, and access the required authorization tokens beforehand.
e.g., If you need to use the Azure SQL DB connector, you need to create an Azure account and obtain an authorization token.",141
Marketplace,Update a connector,"If you want to introduce a change to your component and update the connector you published for it, you need to explicitly republish the connector. To learn more on how to update a connector, see Use a Connector in Your Component.",48
Observability Overview,Observability Overview,"Observability in Choreo provides the capability to visualize and monitor the performance of services deployed on Choreo. Choreo has in-built support for viewing the overall status, latencies, throughput data,  diagnostic data, and logs. Hence, you can use Choreo Observability to detect and troubleshoot anomalies in your services efficiently. ",74
Observability Overview,Dashboard,"Choreo Observability dashboard gives you more than one way to monitor your services. This section introduces the dashboards.

### Dashboard overview
!!! note
    The observability dashboard for non-Ballerina components doed not display the low-code diagram. Therefore, the functionality within the low-code diagram is available only to Ballerina components. 
The Observability dashboard allows you to:
- Observe the throughput and latencies of requests served over a given period.
- View the logs generated over a given period.
- Compare metrics side-by-side for better diagnosis.
- Observe the flame graph (Diagnostics view) generated over a given period (not available for non-Ballerina components).
- View the low-code diagram (not available for non-Ballerina components).
- Trace requests (not available for non-Ballerina components).
!!! info
    By default, automatic refreshing is turned off for the Observability view. You can configure the Observability view to be automatically refreshed at a specified time interval via this field.
!!! note
    The Observability view is private and is only visible to the service owner.

### Throughput and latency graphs
The throughput graph shows the throughput of requests per hour for a selected timestamp.   
!!! note
    The low-code diagram is not available for non-ballerina components. 
By default, Choreo renders this graph for the data generated within the past 24 hours. You can change the default time window by selecting the time range and zone from the options bar. To expand the graph, click and drag the cursor over the period you want to drill down. 
You can view the Choreo service logs in the **Logs** view below the graph. Clicking on either graph updates the **Logs** view to contain the corresponding log entries generated at that time. You can use these logs to identify the reasons for any latency and throughput anomalies you detect using the graph.

### Diagnostics view
The **Diagnostics view** provides the capability to view errors, throughput, latencies, CPU usage, memory usage, and logs simultaneously for a particular event. You can detect and analyze errors and anomalies in detail via the **Diagnostics view**.
By default, the time range selected for the **Throughput & Latency** graphs is the same time range used for the **Diagnostics view**.
A **bin** is a horizontal section of the graph for a particular period. A bin consists of the following items:
- **Date/Time:** The timestamp for the log entries as they started to appear.
- **Logs:**  List of log entries and their respective log count that occurred within the bins time frame. These log entries appear according to precedence. The error logs are listed first, followed by the info logs. Each bin shows a maximum of five log entries sorted by the log count.
- **Error:** The number of HTTP errors that occurred at the selected time.
- **TP:** Throughput of the requests at the selected time (req/s).
- **Latency:** Latency of the request at the selected time (ms).
- **CPU:** CPU usage at the selected time (millicores).
- **Memory:** Memory usage at the selected time (MiB).",717
Observability Overview,View and filter all logs,"The **Logs** panel includes all logs generated by the service. You can filter it based on time or based on text.
To download the log entries, click **Download**. As a result, the log entries are saved as a .zip file in the location you specify.

### Trace requests
You can trace requests received by your service at a given timestamp by clicking a point in the time axis of either the throughput or the latency graphs.  The low-code view shows the received requests.
For each request in the low-code view, it displays the request time, the latency, and the status. Furthermore, when you click on a specific request, you can view the status code, request latency, the path (control flow) followed to execute the request, and the execution time per `if`, `while`, and `foreach` body.
The low-code diagram also displays the average request latency and the success rate for each client request that corresponds to the selected time interval.",206
Root Cause Analysis,Root Cause Analysis,Choreo provides insightful observability features to drill down to the request level and confirm the root cause for anomalies you detect. This guide describes how you can detect anomalies and perform root cause analysis on a service deployed in Choreo.,47
Root Cause Analysis,Access observability data of a component,"To visualize the observability data of a component, follow these steps:
1. Access the Choreo Console via https://console.choreo.dev/.
2. On the Home page, select the project with the component that you want to observe.
3. Click on the component that you need to observe to open it.
4. To open the **Observability** view for the component, click **Observe** on the left navigation.
    You can view the following:
    - Low-code diagram
    - Throughput graph
    - Latency graph
    - Logs
    - Diagnostic data",146
Root Cause Analysis,Detect anomalies and perform root cause analysis,"To detect anomalies of the component, you must trace its executions from the code statement level to the machine it runs in. You can analyze observability data and logs to troubleshoot and identify the root cause for the anomalies you detect.",47
Root Cause Analysis,Analyze the throughput graph,"The throughput graph depicts the total throughput of the component (which includes both successful and erroneous requests) during a selected time interval. You can analyze the spikes in the throughput graph to identify the root cause for requests that result in an error.
The actions you can perform in a throughput graph are as follows:
- **View the number of successful requests and errors:** To do this, hold the pointer over the area of the graph that shows the required time interval. The throughput graph displays the number of successes over the graph. The low-code diagram displays the success rate for each API call.
- **View log entries:** If you click the required area on the graph, the log entries applicable for that period are displayed in the Logs pane. In this example, the log displays multiple entries indicating the error `employee information not found in the hr-service`.
- **View data for a custom time range:** You can expand the graph by clicking and dragging the pointer over the period you want to drill down. The default graph displays data for the last 24 hours.
- **View details per request:** Once you view data for a custom time range, each request that was sent during the selected time range is displayed in a pane above the low-code diagram as shown below.
    This pane displays the latency, the time at which the service received the request, and the status.
    When you click on a specific request, the low-code diagram displays the following:
    - If an error has occurred, the error code is displayed near the relevant API call. In this example, the `404` error code has occurred when the request was processed by an API call.
    - The path (control flow) in which the service executed the request is highlighted in green. In this example, the highlighted path indicates that the selected request was processed on the HTTP API call (on the GET request sent).
    - The execution time is displayed per `if`, `while`, and `foreach` body. In this example, the execution time taken by the component for the `if` body is 1.2 milliseconds.",449
Root Cause Analysis,Analyze the latency graph,"The latency graph depicts the latency of requests over a selected time interval. You can analyze the spikes in the latency graph to identify the API invocations that result in error status. The actions you can perform are as follows:
- **View details of a latency that has occurred:** To do this, go to the latency graph under the **Throughput & Latency** tab and click a data point where there is a spike. This displays the latency, start time, and status of the corresponding requests just above the low-code diagram.
- **View details for a custom time range:** If you want to drill down to view details at a higher granularity, drag the pointer over a time range to view the graph for the selected period.
- **View details per request:** The latency graph allows you to view details for each request that the service received during a selected custom time range. For details, see Analyze the throughput graph - **View details per request** bullet point.",202
Root Cause Analysis,Analyze diagnostic data,"The **Diagnostic View** allows you to further drill down the observability data you view in the **Throughput & Latency** tab to identify possible root causes for anomalies of a service.
!!! info
    The time range applied to the **Diagnostics View** by default is the same time range for which you viewed the **Throughput & Latency** before clicking on that tab.
If you hold the pointer over a section where you see fluctuations in multiple bins, you can view the related logs.
In this example, the logs indicate that the reason for the errors during the selected time interval was that client has been unable to connect to the `hr-service` component. This error has occurred 1637 times.
In the same example, if you further analyze the sample diagnostic data, you can identify the connectivity error as the most common error.
Based on this, you can conclude that the root cause of the anomalous throughput and latencies is the connectivity issue.",204
View API Insights,Access the Insights page,"To open the **Insights** page, access the Choreo Console at https://console.choreo.dev/, and click **Insights** in the left navigation menu.",38
View API Insights,Overview,"The **Overview** page gives you a quick overview of the performance of the system. It can be used as a dashboard to view the current system status.
The information displayed is as follows:
- **Total Traffic**
  This widget displays the total traffic of the selected environment received during a given time interval. Both successful requests and failed requests are displayed. To investigate further, you can click the arrow icon on the bottom right corner of the widget to open the **Traffic** page.
- **Error Request Count**
  This widget displays the total number of requests that have resulted in errors in your selected environment during the selected time range.
- **Average Error Rate**
  This widget displays the average error rate (i.e., error count/total request count) of the selected environment for a given time interval. You can use this widget as an indicator to understand the health of the system. If the error rate is high, you can investigate further by clicking the arrow on the bottom right of the widget and opening the **Errors** page.
- **95th Percentile Latency**
  This widget displays the 95th percentile of all API latencies in your selected environment for the given time interval. You can use this widget to know whether the complete system operates under given SLAs. This metric provides the first indication of slow APIs. To investigate further, you can click the arrow on the bottom right of the widget to open the **Latency** page where you can further analyze the latency.
- **API Request Summary**
  This chart displays the total successful requests, the total requests that have resulted in errors, and the latency in a timeline. The y-axis on the left displays the request count and the error count. The x-axis shows time, and the y-axis on the right shows the latency in milliseconds. The granularity of the data points is decided based on the time range you have selected. The tooltip provides the exact value of all three metrics accurately.",410
View API Insights,Traffic,"The **Traffic** page shows information related to the traffic that goes through your API management deployments. This includes API usage, application usage, resource usage, etc. You can use this page to investigate the usage of APIs and applications, traffic patterns, etc.
You can filter the information displayed in the widgets as follows:
**By API**         | In the **API** field, you can select one or more APIs for which you want to view analytics. **All** is selected by default. Once you select an API, you can further filter by a specific application that uses the selected API via the **Application** field described below.
**By Application** | In the **Application** field, you can select the applications for which you want to view analytics. **All** is selected by default. The available applications are all the applications that have subscribed to one or more of the APIs you selected in the **API** field.
You can view the following information for the APIs you have selected using the above filtering criteria:
- **API Usage Over Time**
  This timeline shows the count of API hits for the APIs for the filtered APIs. If multiple APIs are selected, the timeline shows each API in a separate line with a legend separating each line. You can also zoom in on a selected time range by selecting that area in the chart. To restore to the original view use the **Zoom out** button on the top right-hand corner of the plot.
- **API Usage By Application**
  This widget shows the per-application breakdown of requests for the APIs you selected. You can use the pie chart view or the line chart view. You can switch between the two views using the small icon at the upper-right corner of the widget.
- **API Usage By Target**
  This widget shows the per-backend breakdown of requests for the APIs you selected. This information is useful when multiple APIs share the same backend that has traffic restrictions. You can use these stats to scale your backends proactively. You can switch between the two views using the small icon at the upper-right corner of the widget.
- **API Resource Usage**
  This table shows a resource-level breakdown of API traffic. Each row represents an API resource and it shows the API name, resource path, API method, and the hit count for that combination.",492
View API Insights,Errors,"he **Errors** page shows information related to erroneous API calls that are received by your system. The errors are categorized based on the error type. You can further drill down using the error subtypes. Use this page as the starting point for debugging any API errors.
You can filter the information displayed in the widgets as follows:
**By API** | In the **API** field, select the APIs for which you want to view analytics. By default, all APIs are selected. You can select one or multiple APIs from this selector and view the aggregated result.
**By Category** | The **Category** field is displayed when you click **Category** in the upper right corner of the page. In this field, you can select one or all of the following error categories:**Authentication**: Any kind of authentication error falls into this category including expired/missing/invalid credentials.**Target Connectivity**: Any kind of back-end error falls into this category including connection time-outs/other back-end errors (for example, 4xx and 5xx status codes).**Throttling**: Any kind of rate-limiting error falls into this category including application throttling/subscription throttling.**Other**: All other errors fall into this category including mediation errors/resource not found errors.
**By Status Code** | The **Status Code** field is displayed when you click **Status Code** in the upper right corner of the page. In this field, you can select all or any available HTTP status code category (4xx, 5xx, etc.). These status codes represent the response status of the API Gateway.

#### Viewing errors by category
The following widgets are available for monitoring errors when you have selected **Category** in the upper-right corner of the page.
- This graph shows the error by category over time for the selected period. Apply the required filters as explained above to select the APIs and the error categories to which this content applies. When you select multiple APIs, the error count is grouped by category.
- This table provides further information about the errors such as application details and the error reason. For some authentication errors, the application name is not available. You can use this table to get more concrete information about the errors related to your APIs and then start the problem identification.

#### Viewing errors by status code
The following widgets are available for monitoring errors when you selected **Status Code** in the upper-right corner of the page.
- **Errors by Status Code**
  This graph shows the distribution of HTTP status codes received for errors over time for the selected period. Apply the required filters as explained above to select the APIs and status code groups to which this content applies. When you select multiple APIs, the error count is grouped by the status code.
- **Target Errors by Status Code**
  This graph shows the distribution of target errors that have occurred during the selected time interval by HTTP status code. Apply the required filters as explained in the table above to view the APIs and status code groups to which this content applies. If you select multiple APIs, the widget groups the target error count by the status code.
- **Errors**
  The Errors heat map shows the HTTP response codes of errors sent to the client by the API Gateway. Each row displays the number of times the system returned each status code for the selected APIs. The cell color is red for higher numbers and white for lower numbers. If required, you can further filter the results by the error code groups you identified with the **Errors by Status Code** graph.
- **Target Errors**
  The Target errors heat map shows the HTTP response codes of errors that the API Gateway received from the backend. Each row displays the number of times the system returned each status code for the selected APIs. The cell color is red for higher numbers and white for lower numbers. If required, you can further filter the results by the error code groups you identified with the **Target Errors by Status Code** graph.",830
View API Insights,Latency,"The **Latency** page shows information related to the latency of API calls within the API management deployment. You can view a summary of the slowest APIs and then drill down into the API view for further analysis. Use this page as a starting point to debug API slowness.
The information displayed is as follows:
- **Top 10 Slowest APIs**
  This widget allows you to identify the slowest APIs of the API management system at a glance. Since these are the APIs that contribute to the higher 95th percentile of the system, improving these APIs lowers the 95th percentile of latency in the API Management deployments.
- **Latencies By Category**
  This widget allows you to further drill down details in the above chart. Use the API selector in this widget to select the slow API you identified in the earlier step and then analyze further. Use the charts available in the widget to view the 95th percentile and the median latency over the selected period of the following:
    - Backend
    - Request mediation
    - Response mediation
    You can use these charts to further drill down and analyze whether the latency occurs in the backend, request mediation, or response mediation. Also, because you can see both the median and 95th percentile, you can easily identify whether the slowness is occurring in each request or whether it is intermittent.",285
View API Insights,Cache,"The **Cache** page shows statistics that indicate the efficiency with which response caching is carried out for the requests sent to your APIs.
The page displays the following statistics:
- **Cache Hit Percentage**
  This graph shows the percentage of requests the system has handled via the response cache over time and the total hits over time. This information allows you to assess how efficiently the backend handles API requests. For example, if the cache hit rate is low, it may indicate that the backend generates the same response each time a specific request is sent instead of returning the response via the cache. In such a scenario, there is scope to improve performance via response caching.
- **Latency**
  This section shows the total latency reported during the same time interval applied to the **Cache Hit Percentage** graph above.",164
View API Insights,Devices,"The **Devices** page displays information about operating systems and HTTP agents that end users use to invoke the APIs. You can use this page to get an idea of the distribution of your user base and improve your APIs to match the audience.
To filter the information displayed on this page by API, select the required API(s) in the **API** field. **All** is selected by default.
The information displayed is as follows:
- **Top Platforms**
  This chart shows the breakdown of the API clients by the operating system. The pie chart only shows platforms with a significant amount of requests. Other platforms are grouped under the **Other** category.
- **Top User Agents**
  This chart shows the breakdown of the API clients by user-agent. The pie chart only shows user agents with a significant amount of requests. Other platforms are grouped under the **Other** category.",185
View API Insights,Alerts,"The **Alerts** page shows information related to business alerts issued by Choreo for your currently selected environment and organization. You can use this page as a health monitoring dashboard and make it visible to your project team. Using this page you can drill down on each alert and discover possible anomalies in your published APIs. See the topics given below to get details of the available widgets and understand how to use them effectively.
**Prerequisites**
To use this page, be sure to configure alerts and have API invocations that trigger alerts. 
!!! Note
    Alerts are retained only for a week.
- **Alert Summary**
  This table lists down each alert generated during the selected time interval. The message of the alert can be viewed by expanding the arrow icon on the details column. The drop-downs can be used to filter alerts based on the alert type and API.
- **Top APIs by Alert Count**
  This shows a pie chart and a table to visualize the alert distribution during the selected time interval.",212
View API Insights,Reports,"The **Reports** page allows you to download monthly usage reports for your system. There are preconfigured reports with system-wide statistics, and a custom report generator to generate reports based on a subset of APIs/applications.

#### Download custom reports
This widget allows you to generate a custom report for the statistics that have been generated up to now and download it.
To generate a custom report, follow the steps below:
1. In the **API** field, select one or more APIs for which you want to generate the report. If required, you can select all the APIs by selecting **All**.
2. If you need to further filter the content printed in the report, select one or more applications in the **Application** field. By default, all the applications that have subscribed to one or more of the selected APIs are selected.
    !!! Tip
        If you want to filter the report content by the API consumer instead of the application, click on the toggle switch to the right of the **Application** field, and then select the required consumer. Only consumers who have subscribed to one or more of the selected APIs are displayed in the list. You can either select one, or all of them.
3. Select the required year and the month in the **Year** and **Month** fields to specify the time interval for which you want to generate the report.
4. Click **Download**, and select the required format.
The report is downloaded in the specified format. The following is a sample report generated in PDF format.
The contents of the report are as follows.
**Generated Time**      | The date and the time the report was generated.
**Organization**        | The organization to which the report applies. Each report always applies to a specific organization.
**Environment**         | The environment to which the report applies. Each report always applies to a specific environment.
**Tenant**              | The tenant to which the report applies. Each report always applies to a specific tenant.
**Reporting period**    | The time interval for which the report is generated. 
**Total request count** | The total request count received by all selected APIs during the report time interval.
The table in the report contains the following rows.
**API**          | The name of the API.
**Application** | The name of the application. The name of the subscriber is also provided within brackets.
**Usage**       | The usage count.

#### Download pregenerated reports
These widgets allow you to download monthly reports for the last three months.
To download a pregenerated report, click **Download** for the relevant month and then click on the required format.",613
View API Insights,Geo Map,"The **Geo Map** page allows you to see a geographical representation of your API usage. You can use this page to make business decisions such as identifying growing regions, analyzing the impact of a region-specific marketing campaign, etc.
To filter the information displayed on this page by API, select the required API(s) in the **API** field. The default value is **All**.
This heat map highlights the countries with the appropriate color based on the hit count. It uses a relative color scale to depict the highest hit count to the lowest non-zero hit count.

#### Viewing the number of requests by country
You can hold the pointer over the highlighted countries to view the country name and the total number of hits from that location. You can also use the mouse to zoom the map or pan it.
!!! Note
    Currently, this feature is only available for on-premise environments.
Optionally you can download geo map data in a tabular format using the PDF or CSV download options by clicking download on the top right corner.
!!! Note
The geo-map page utilizes the IP address of the incoming request to derive the geolocation. The actual source IP address can be replaced if there are intermediate hosts between the client and the gateway node. Therefore, the reverse proxy or the load balancer fronting the gateway node must add the `x-forwarded-for` header to each request to preserve the source IP address. If you do not configure this correctly, the **Geo Map** page will not show any data. To test this, you can manually add an `x-forwarded-for` header to the request.",345
Generate Custom Reports,Generate Custom Reports,"Choreo insights allow you to generate custom reports to view the information that is important to you to make timely decisions for the betterment of your business. With custom reports, you can generate reports for a set of metrics of your choice and aggregate results by specific fields. Once generated, the metrics can be filtered out using any selected group-by filters. Custom reports support three visualizations: overtime charts, pie charts, and tables.",87
Generate Custom Reports,Metrics,"horeo Insights allow you to retrieve data for the following metrics:
 - Successful Hit Count
 - Response Cache Hits
 - Request Mediation Latency
 - Response Mediation Latency
 - Backend Latency
 - Total Latency
 - API Errors
 - Target Errors",59
Generate Custom Reports,Group-by,"**Group-by** fields specify how to group the metric data. e.g., You can select **Successful Hit Count** in the **Metrics** field and **API Name** under **Group-by** to retrieve the successful hit count grouped by the API name.
Choreo Insights allow you to group metric data by the following fields:
 - API Name
 - API Version
 - API Resource Template
 - API Method
 - API Creator
 - Application
 - Application Owner
 - Destination
 - User Agent
 - Platform
To generate a custom report, follow the steps below:
1. In the left navigation menu, click **Custom Reports**.
2. Select metric(s) from the **Metrics** drop-down selector.
3. Select a minimum of 1 and a maximum of 3 group-by field(s) from the **Group By** drop down selector.
4. Set the order of the group-by filters by drag and drop to determine the grouping order of the selected metric(s).
5. Once you determine the order of the group-by fields, you can set values for each group-by field from the respective dropdown. 
6. Click **Generate**.",257
Generate Custom Reports,Download Reports,"Choreo Insights allow you to download report data related to each chart as a **PDF** or a **CSV** file.
To do this, click the **Download** icon on the top right of the relevant chart and select the required file format.",54
Configure Alerts,Configure Alerts,"This section shows how you can configure alerts for your API manager deployments. These alerts allow you to proactively monitor your API ecosystem and take corrective measures for any abnormalities you find.
You can configure alerts for each environment within your organization. You can configure and add new, modify, or delete alerts per API. Optionally, you can specify a list of emails for each alert configuration.
Alerts are subject to a suppression policy to ensure that you do not receive duplicate alert notifications within a specific time interval. A 10-minute suppression window is applied by default, and it is not configurable at present. Note that the suppression policy is applicable per alert configuration.
!!! info
    - The maximum number of alerts that can be configured is 20 for each organization, environment, and tenant combination.
    - Adding an email to an alert configuration is optional. The maximum number of emails per alert configuration is limited to 5.
The alert can be a latency alert or a traffic alert.",203
Configure Alerts,Latency alerts,"Configure latency alerts to be notified if the response latency of APIs is greater than a predefined threshold. This is useful when you have APIs that should honor SLAs and when you want to know about slow APIs proactively.
To configure a new latency alert, follow the steps below:
1. In the **Insights** page, click **Alert Configuration** to open the **Alert Configuration** page.
    The **Latency** tab is open by default.
2. Verify that you are in the correct organization, and select the required environment. 
3. In the **API Name** field, select the API for which you want to configure the alert.
    !!! Info
        Only the APIs that you have invoked at least once are listed here. For other APIs, you need to give the API name in the required format as instructed in the UI.
4. In the **Metric** field, select the required metric against which you want to evaluate the alert configuration.
    !!! tip
        The list includes all available options. If there are multiple metrics, you can select the required metric. If there is only one metric to select, that metric is selected by default, and the field is disabled. 
5. In the **Latency** field, specify the threshold in milliseconds.
    !!! info
        When the 95th percentile of the selected metric exceeds the threshold provided here, alerts are triggered.
6. If required, specify the list of emails that should be notified when the alert is generated in the **Emails** field.
7. Click **Add**.
Once an alert is successfully added, the alert configuration  is displayed in the table in the lower section of the page. Each configuration can be edited and removed using this table. If multiple emails are configured, they are displayed in a comma-separated list.",413
Configure Alerts,Traffic alerts,"Configure Traffic alerts to identify if the request count of APIs is greater than a predefined threshold. This is useful when you have APIs that are using backends with traffic limits or monetized backends that require your system to proactively scale depending on the incoming traffic.
To configure a new traffic alert, follow the steps below:
1. In the **Insights** page, click **Alert Configuration** to open the **Alert Configuration** page.
2. Click **Traffic** to open the **Traffic** tab.
3. Verify that you are in the correct organization, and select the required environment. 
4. In the **API Name** field, select the API for which you want to configure the alert.
    !!! Info
        Only the APIs that you have invoked at least once are listed here. For other APIs, you need to give the API name in the required format as instructed in the UI.
5. In the **Metric** field, select the required metric against which you want to evaluate the alert configuration.
    !!! tip
        The list includes all available options. If there are multiple metrics, you can select the required metric. If there is only one metric to select, that metric is selected by default, and the field is disabled.
6. In the **Threshold** field, specify the threshold number of requests per minute.
7. If required, specify the list of emails that should be notified when the alert is generated in the **Emails** field.
8. Click **Add**.
When added successfully, the alert configuration is displayed in the table in the lower section of the page. Each configuration can be edited and removed using this table. If multiple emails are configured, they are displayed in a comma-separated list.",388
Choreo Insights API,Choreo Insights API,"Choreo Insights API is a GraphQL API that allows you to fetch data in a flexibly by defining the criteria with precision. This guide explains the different ways in which you can fetch data via this API.
 - **Allowed operations:** Queries
 - **Schema-defined types:** Objects, Inputs, Enums, and Scalars",75
Choreo Insights API,Try out,"You can try out the Choreo Insights API with your data via GraphQL Explorer
!!! warning
    You cannot work with the GraphQL Explorer with the Safari web browser at present due to this issue(https://developer.apple.com/forums/thread/658688) in the browser.",65
Choreo Insights API,Query,The query root of the Choreo Insights GraphQL API.,14
Choreo Insights API,Objects,"### API
Represents API details.

### APILatency
Represents latency values for a single API over time.

### APIUsage
Represents the API usage for a single timestamp. The timestamp is calculated based on the granularity value provided.

### APIUsageByApp
Represents API usage across APIs by a single application.

### APIUsageByAppOverTime
Represents API usage across APIs by applications over time.

### APIUsageByApplication
Represents a single API usage by a single application.

### APIUsageByBackend
Represents API usage across APIs by a single backend.

### APIUsageByBackendOverTime
Represents API usage across APIs by each backend over time.

### APIUsageOverTime
Represents a single API usage over time.

### AlertSummaries
Represents alert summaries.

### AlertSummary
Represents a summary for an alert.

### Application
Represents application details.

### CacheHit
Represents the response cache hits and misses for a single timestamp. The timestamp is calculated based on the
granularity value provided.

### CacheHits
Represents the response cache hits and misses over time.

### CustomReportGroupBy
Represents the usage data overtime for the selected parameters of a specific groupByValue

### CustomReportOvertime
Represents usage data overtime for the selected parameters.

### CustomReportTopOvertime
Represents usage data overtime for the selected parameters grouped by the top N groupByValues.

### CustomReportUsage
Represents usage data for a single timestamp in CustomReports.

### DetailsOfErrors
Represents error details over time.

### Environment
Represents an environment.

### ErrorCountByCategory
Represents the number of errors from each category for a single timestamp. The timestamp is calculated according to the
provided granularity value. If you select some categories, the error counts are retrieved only for those categories,
and a null value is shown for the other categories that are not selected.

### ErrorCountByCode
Represents the error count for a single error status code.

### ErrorCountByCodeForAPI
Represents the error count for each status code for a single API.

### ErrorDetails
Represents details of an error for a single timestamp. The timestamp is calculated according to the granularity value
provided.

### ErrorStatusCodeCategoryCounts
Represents errors by the main status code (4xx or 5xx) and the total error count.

### ErrorSummary
Provides the unsuccessful usage (i.e., 4xx and 5xx response codes) summary across all APIs.

### ErrorValue
Represents the unsuccessful request count (i.e., 4xx and 5xx response codes) for a single timestamp. The timestamp
is calculated based on the granularity value provided.

### ErrorsByCategory
Represents the errors by category over time.

### ErrorsByStatusCode
Represents the error counts grouped by status code for each API.

### ErrorsByStatusCodeCategory
Represents the error category values (grouped as 4xx, 5xx, and total) for both proxy and target errors for a
single timestamp. The timestamp is calculated based on the granularity value provided.

### Latency
Represents latency values for each latency category for a single timestamp. The timestamp is calculated based on the
granularity value provided.

### LatencySummary
Provides the latency summary.

### LatencyValue
Represents the latency value for a single timestamp. The timestamp is calculated according to the provided granularity
value.

### Organization
Represents an organization.

### OverallLatency
Represents the overall latency values.

### Pagination
Represents pagination details.

### Platform
Represents a platform.

### Provider
Represents API Provider details.

### ResourceUsage
Represents the usage of a single API resource.

### ResourceUsages
Represents API resource usages.

### SlowAPI
A slow API identified based on the response latency (95th percentile).

### Subscriber
Represents API Subscriber details.

### SuccessAPIUsageByApplication
Represents successful usages(that have resulted in the 2xx response code) of an API by an application.

### SuccessSummary
Provides the successful (2xx response code) usage summary across all the APIs.

### SuccessValue
Represents the successful request count (i.e., requests that have received the 2xx response code) for a single timestamp. The timestamp is calculated according to the granularity value provided.

### TopAPIByAlertCount
Represents a top API by alert count.

### TopAPIsByAlertCount
Represents the top APIs by alert count.

### TotalError
Represents the total errors.

### UsageByGeoLocation
Represents the usage of a single API in a single country.

### UserAgent
Represents a user agent.",1089
Choreo Insights API,Inputs,"### APIUsageByAppFilter
Filters the API usage by application results.

### APIUsageByBackendOverTimeFilter
Filters the results for API usage by backend over time.

### APIUsageOverTimeFilter
Filters the results for API usage over time.

### AlertSummaryFilter
Filters the alerts summary results.

### ApplicationFilter
Filters applications by the application owner and API IDs.

### CacheFilter
Filters response cache results.

### DataFilter
Filters results by the given combination of organization, environment, and tenant.

### DeviceFilter
Filters results related to devices.

### ErrorCountByStatusCodeFilter
Filters errors by status code results.

### ErrorsByCategoryFilter
Filters errors by category results.

### ErrorsByStatusCodeFilter
Filters errors by status code results.

### ErrorsDetailsFilter
Filters the results for error details.

### GeoLocationFilter
Filters the API usage by geolocation results.

### LatencyFilter
Filters latency results.

### LatencySummaryFilter
Filters latency summary results.

### OrgFilter
Filters results for the given organization.

### PaginationFilter
Filters related to pagination.

### ResourceUsageFilter
Filters resource usage results.

### SearchFilter
Filters results by searching matching results for the provided search text.

### SubscriberFilter
Filters the subscriber results.

### SuccessAPIUsageByAppFilter
Filters successful API usage by application results.

### TenantDataFilter
Filters results by the tenant.

### TimeFilter
Filters results by the provided date range.

### TopAPIsByAlertCountFilter
Filters the top APIs by alert count results.",390
Choreo Insights API,Enums,"### EnvironmentType
Represents an error type.

### ErrorCodeType
Represents an error code type.

### ErrorType
Represents an error type.

### GroupByField
Represents an groupByField used in CustomReports.

### Metric
Represents a metric used in CustomReports.",69
Choreo Insights API,Scalars,"### Boolean
The Boolean scalar type represents true or false.

### Float
The Float scalar type represents signed double-precision fractional values as specified by IEEE 754(https://en.wikipedia.org/wiki/IEEE_floating_point).

### ID
The ID scalar type represents a unique identifier, often used to re-fetch an object or as the key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as ""4"") or integer (such as 4) input value is accepted as an ID.

### Int
The Int scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.

### String
The String scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",224
Programmatic Access to Insights API,Programmatic Access to Insights API,"The **Insights** page in the Choreo Console displays data fetched from the Insights API exposed over the Internet. However, in some scenarios, you may need to fetch data from external systems and implement custom dashboards to display this data.
Choreo provides a secure and user-friendly method to achieve this requirement.",68
Programmatic Access to Insights API,Become a member of the Choreo System organization,"1. Access the Developer Portal of the `Choreo System` organization via https://devportal.choreo.dev/choreosystem and proceed to sign in using your credentials.
2. Click on **Applications**.
3. To get access to the `Choreo System` organization, click **Request Access**.
Once you request access, you are automatically added as a member of the `Choreo System` organization.
Verify this by checking whether the `Choreo System` organization appears in your list of organizations.",117
Programmatic Access to Insights API,Create an application and generate keys,"To create an application and generate keys, follow the steps below:
1. Click on the **Applications** link to create a new application in the Choreo System organization.
2. Enter a suitable name and create the application.
3. To subscribe to the **Insights** API via the newly created application, click **Subscriptions** in the left navigator, and then click **Add** for the Insights API.
4. To generate credentials for the application, click  **Production Keys** -> **OAuth 2.0 Tokens** in the left navigator, and then click **Generate Credentials**. This generates a consumer key and secret for the created application.
5. Specify a suitable token expiry time and click **Update**.
6. Execute the following curl command to generate an access token:
    ```bash
    curl --location --request POST 'https://sts.choreo.dev/oauth2/token' \
    --header 'Authorization: Basic <BASE64_ENCODED_CONSUMER_KEY_AND_CONSUMER_SECRET_OF_YOUR_APP_HERE>' \
    --header 'Content-Type: application/x-www-form-urlencoded' \
    --data-urlencode 'grant_type=client_credentials' \
    --data-urlencode 'orgHandle=<YOUR_ORG_HANDLE_HERE>' \
    --data-urlencode 'scope=apim:api_manage'
    ```
    !!! info
        To get your organization handle name, you must sign in to https://console.choreo.dev, go to **Settings**, and click **Copy Handle**.
    This token can then be used to access the Insights API exposed via https://choreocontrolplane.choreo.dev/93tu/insights/1.0.0/query-api.
    A sample curl command to invoke the Insights API is shown below.
    ```bash
    curl --location --request POST 'https://choreocontrolplane.choreo.dev/93tu/insights/1.0.0/query-api' \
    --header 'Content-Type: application/json' \
    --header 'Authorization: Bearer <TOKEN_HERE>' \
    --data-raw '{""query"":""query ($org: OrgFilter!) {listEnvironments(org: $org){id\n name}}"",""variables"":{""org"":{""orgId"":""<ORG_UUID_HERE>""}}}'
    ```
    !!! tip
        When the token expires, you can generate a new token programmatically by making an API call to the token endpoint via the client credentials grant.

        If a token theft occurs, the relevant token can be revoked by making an API call to the revoke-endpoint.",705
Alerts,Alerts,"Alerts are notifications sent by the Choreo Alert Manager when the components that run in the production environment are not functioning as expected. Whenever a critical error (e.g., out-of-memory error) occurs, the component logs an error, and the Alert Manager notifies the members of your organization with admin rights via an email. This email contains a link to the **Observability** tab of the component where the metrics and logs applicable to the time interval in which the error occurred are highlighted. The Alert Publisher collects and sends alerts to Alert Manager every five minutes, which then decides when to send these alerts to the users.",129
Alerts,Types of alert email notifications,"When an alert occurs for the first time during the alerting interval, the Choreo Alert Manager sends an alert email immediately. When there are multiple occurrences of the same type of alert for a particular component, the Choreo Alert Manager suppresses the alerts for 15 minutes and generates a single email that specifies the event count to denote how many such errors occurred during an alerting interval.",78
Alerts,Types of alerts,"Out-of-memory alert
Application error alert
Anomaly alert",14
Alerts,Out-of-memory alert,"If the Kubernetes pod that runs your component goes out of memory, it restarts immediately. However, during that interval, the service becomes unavailable and the requests that it was processing at the time can become erroneous.
Due to this, the out-of-memory error can be very adverse for your component. Therefore, when an out-of-memory error occurs, the admin members of the organization that owns the component receive an alert email similar to the sample given below.
This email contains details about your component and the number of times this event occurred within the alert monitoring period.
You can check the logs and the memory usage during that time interval by clicking **Check in Portal**. This takes you to the **Observe** tab of that particular component. You can also contact WSO2 for support via the **Contact us** link provided at the bottom of the alert email.

#### Troubleshoot out-of-memory error
When you click **Check in Portal**, you are redirected to the **Observe** tab of the component in the Choreo Console.
When you hover over the graph, you can view the memory usage. You can note that it has increased steadily during the time interval and reached the maximum value. This causes the application to log the out-of-memory error and restart.

#### Select a custom time range
If you want to change the automatically selected time interval (i.e., one hour) for debugging purposes, do as follows:
1. Click the drop-down bar for time selection.
2. Click **Custom**.
3. Specify the time range for which you want to view logs in the **Diagnostics View** tab by entering the required times in the **From** and **To** fields.
4. Click **Apply**.
For more information on how to use the **Observe** tab for root cause analysis, see Root Cause Analysis.",402
Alerts,Application error alert,"This alert is triggered when you use the **`log:printError()`** function in your component and the component logs an error via that. Such errors indicate that your component is unable to function as designed, and therefore you are notified via email so that you can troubleshoot them. The following is a sample of such a notification email. 
This email provides details about the component. You can click **Check in Portal** to open the **Observe** tab in the Choreo Console for this component. You can also get support from WSO2 via the **Contact us** link provided in the email.

#### Troubleshoot application error
Once you click **Check in Portal** in the notification email, you are redirected to the **Observe** tab of the component in the Choreo Console.
This opens the **Throughput and Latency** view in which the request that caused the error log is automatically selected. The graphs in this tab display the throughput and latency for this request. The color of the graph indicates whether the request was successfully processed or whether it resulted in an error. 
In addition, you can observe the following:
- The error log that triggered the alert mail.
- The time range for which the error log applies. However, you can scroll to view more logs that occurred during the time range selected for debugging purposes. This time range is selected via the drop-down field. You can update this time range as explained under Select a custom time range.
- The status and the latency of the request.",321
Alerts,Anomaly alert,"This alert is triggered when average latency exhibits a considerable upward shift compared to what the system observed during the last five minutes for a resource function. Latency spikes and upward latency shifts are considered high latency.
**Anomaly alerting is disabled by default**. An organization administrator needs to enable it. 
Choreo alerts a user of this anomaly via email. This email includes details to identify the component and the resource function, anomaly time stamp, etc. The email has a link that takes a user to the components' latency graph in the observability view pane. A user can view the latency graph by clicking on the link **Check in Portal** in the email and thereby perform an RCA (https://wso2.com/choreo/docs/observability/root-cause-analysis/) for the anomaly. 
The anomaly detector issues two types of alerts:
The immediate alert as as soon as the anomaly is detected
The aggregated alert in which it aggregates all the anomalies detected in the last 15 minutes. The anomaly detecter sends this following the immediate alert.",224
DevOps Portal,DevOps Portal,The Choreo Console allows you to observe the basic deployment process of a Dockerfile-based component. The Choreo DevOps Portal provides a low-level Kubernetes view of the underlying data plane resources for advanced developers who want to carry out a detailed diagnosis of Choreo components. Most advanced features on the DevOps Portal are only available for private data planes.,77
DevOps Portal,Access the DevOps Portal,"You can access the DevOps Portal in one of the following ways:
- Via https://devops.choreo.dev/
- Clicking **DevOps Portal** in the top menu of the Choreo Console
When you open the DevOps Portal, it displays the deployment insights and the recently created components of the currently selected project as shown below:
If you hold the pointer over the **Deployment Insights** graph, it displays the number of components you have deployed to each environment up to the date you are pointing. This count applies to the currently selected organization and project.
You can select the required organization and the project for which you need to view this data by selecting the required values in the **Organization** and **Project** lists.",157
DevOps Portal,View component specific information,"In the **Recently Created** section, click on a component to open it on a separate page.
On this page, you can view the information described in the following subtopics.

### Overview
!!! Tip
    The internal routing URL is an internal endpoint for the component. Other components in the same organization can use this URL to communicate with this component without using the public internet or an internal gateway.
In this tab, you can perform the following activities:
- Deploy or redeploy a component
    You can click **Deploy** or **Redeploy** as relevant.
- Perform advance promotions for a component
    When you have multiple environments, the **Overview** tab of the DevOps Portal allows you to select the environment to which you want to promote the component.
    In doing so, you might bypass one or more environments. For example, when you promote a component to the production environment, you can bypass one or more development environments.
- Manage replicas
    If you are on a private data plane, you can click the **+** and **-** icons on this bar to change the minimum and the maximum number of replicas that you want to allow the component to have at any given time.
    Each row displays basic information (such as the CPU and memory usage) about an individual replica. If you move the pointer over a row, three icons will appear. These enable you to view the replica events, status, and logs.

### Containers
This tab displays information related to a selected Docker container such as the URL to the Docker image from which Choreo pulls the component, the image pull policy, resource limits and requests, exposed ports, etc.
If you are on a private plane, you can edit this information. You can also add commands and arguments to the Docker image.

### Configurations and secrets
This tab displays configurations and/or secrets that you have configured for your component.
You can also add new configurations and/or secrets.

### Health Checks
This tab allows you to define health checks for a selected container. 

### Scaling
In this tab, you can define the thresholds based on which the component can scale horizontally.
The threshold limits for memory and CPU consumption are available by default, and you can edit them if required. To add a new threshold criterion, click **Create**. The **Create a Scaling Threshold** pane opens. In this pane, you can select more threshold criteria. You can also create custom thresholds.
When the component reaches the threshold for any resource, the system automatically creates a new replica for it. In this tab, you can specify the minimum and the maximum number of replicas that you want to allow the component to have at any given time.",586
Connect to an External Identity Provider,Connect to an External Identity Provider,"Choreo uses an in-built Identity Provider (IdP) by default to manage OAuth 2.0 clients and generate tokens required to authenticate Choreo APIs. Choreo also allows users with administrator privileges to configure an external authorization server as an IdP via the Choreo Console (for example, Okta). As an administrator, you can add one or more external identity providers to your Choreo organization and obtain a JSON Web Token (JWT) from the identity provider to exchange for a Choreo access token to invoke APIs. This capability allows you to expose your APIs to users who reside in an external user store.",132
Connect to an External Identity Provider,Token exchange,"Choreo supports the token exchange grant type. This grant type allows the client to obtain a Choreo access token by providing a JWT issued by an external IdP. The token exchange grant type uses the protocol defined in the OAuth 2.0 token exchange specification. The OAuth 2.0 token exchange specification describes how you can request and obtain security tokens from OAuth 2.0 authorization servers.
To exchange a JWT issued by an external IdP for a Choreo access token, you must send a request to the Choreo token endpoint with the JWT in the request body. Upon successful authentication of the request, validation of the request takes place, and the corresponding IdP configuration is retrieved using the issuer. Next, the subject token is validated. Successful validation generates and returns a Choreo access token.
Now that you understand the token exchange flow, you can go ahead and add an external IdP to your Choreo organization and then obtain a JWT from the external IdP to exchange for a Choreo access token.",218
Connect to an External Identity Provider,Add an external IdP,"To add an external IdP, follow this procedure:
!!! note
    You must have organization administrator privileges to add an external IdP.
1. Sign in to the Choreo Console at https://console.choreo.dev/.
2. In the left navigation menu, click **Settings**.
3. Click the **API Management** tab. This displays the existing identity providers in your organization if you have already added any.
4. Click **+ Add Provider**. This displays the identity providers supported by Choreo.
5. Click on the IdP you want to add. This displays a form where you must enter details to set up the IdP.
    This example walks you through the steps to add Okta as the IdP. The details you need to fill in are similar for other IdPs as well.
6. Enter appropriate values for each of the fields and click **Next**.
    When you specify the **Well-Known URL**, the values for **Issuer**, **Token Endpoint**, and **JWKS Endpoint** get auto-populated. You can either choose to keep the values or manually change them.
7. Click **Add**. This adds Okta as an external IdP to your Choreo Organization.
Now that you have added an external IdP, you can obtain a JWT from that IdP and exchange it for a Choreo access token to invoke APIs.",312
Connect to an External Identity Provider,Obtain a JWT from an external IdP to exchange for a Choreo access token,"Follow this procedure:
1. Sign in to the Choreo API Developer Portal at https://devportal.choreo.dev/.
2. Click the **Applications** tab.
3. Create a new application or use an existing application.
4. In the left navigation menu, click **OAuth2 Tokens** under **Production Keys**.
5. If you have already generated credentials, go to step 6. Otherwise, click Generate Credentials to generate the Consumer Key and Consumer Secret.
    !!! tip
        Before you click **Generate Credentials**, click **Advanced Configurations** and make sure **Token Exchange** is selected as one of the **Grant Types**.
6. Click the **User Keys** tab.
7. In the **Identity Provider** field, select an IdP.
    This displays the steps you need to follow to generate a token:   
8. As mentioned in **Step 1** in the UI, obtain an access token from the external IdP that you selected. For instructions to obtain an access token for OKTA, see Okta Developer Documentation - Implement OAuth for Okta - Get an Access Token and Make a Request(https://developer.okta.com/docs/guides/implement-oauth-for-okta/main/#define-allowed-scopes).
9. Paste the access token in the **<Your_IdP_name>** Token field. Here, you see the field name displayed as **Okta Token**.
10. Click **://Curl** and copy the curl command to obtain the Choreo access token. Alternatively, you can click **Generate Test Token** to get the Choreo access token via the UI.
Now you can use the generated Choreo access token to invoke APIs that you have subscribed to using the application.",407
Configure a Custom Domain for APIs,Configure a Custom Domain for APIs,"A custom domain for your site is essential for effective branding, discoverability, and credibility. Choreo allows you to configure a custom domain for the APIs you deploy in it.",36
Configure a Custom Domain for APIs,Prerequisite,"To configure a custom domain for your APIs, you must first register a custom domain with a domain registrar service as follows:
1. Sign in to the Choreo Console at https://console.choreo.dev/ using a Google, GitHub, or Microsoft account.
2. If you are a new user, create an organization. Enter a unique organization name. For example, `Stark Industries Ltd`.
3. To expose the custom domain to which your APIs need to be exposed, register it with a domain registrar sevice (for example, ClouDNS (https://www.cloudns.net/)).
    To register the custom domain, you need to create a DNS record of the `CNAME` type via the domain registrar service, associating it with the Choreo gateway access domain (i.e., `customdns.e1-us-east-azure.choreoapis.dev`).
4. Optionally, create TLS certificates and keys to enable TLS for the custom domain. You can also use the `let's encrypt` option. This option allows Choreo to create and manage the certificates on your behalf.",249
Configure a Custom Domain for APIs,Configure a custom domain for your APIs,"To configure a custom domain for your APIs, follow the steps given below:
1. In the left navigation menu, click **Settings**.
2. Click the **Domains** tab and in the **Gateway** sub-tab, click **+ Add Custom Domain**.
3. Enter your domain name and click **Verify**. 
4. Once Choreo verifies the custom domain successfully, click **Next**.
5. You can add the TLS certificates you created for the custom domain. Alternatively, you can click the **Let's Encrypt** option to let Choreo generate and manage the certificates for you. For this scenario, let's click the **Let's Encrypt** option.
6. Click **Add** to save the custom domain.
    The **Settings** page displays the custom domain in the **Domains**/**Gateway** sub-tab.
That's it! You have successfully configured a custom domain for your API Gateway. The API endpoint of the APIs you create will now include the custom domain.",222
Configure Enterprise Login,Configure Enterprise Login,"Choreo's Enterprise Login feature allows your users residing in an external IdP (Identity Provider) to login into Choreo seamlessly without changing their credentials.
This guide takes you through the steps you need to follow to configure an enterprise login for your organization in Choreo.",58
Configure Enterprise Login,Prerequisites,Make sure you have a valid email domain. ,10
Configure Enterprise Login,Create an organization in Choreo,"To create an organization in Choreo, follow the steps below:
1. Sign in to the Choreo Console at https://console.choreo.dev/ using a Google/ GitHub/ Microsoft account.
2. Create an organization as follows: 
    - **If you are a new user**: enter a unique organization name and create an organization. For example, ""Stark Industries"". 
    - **If you are a returning user**: expand the drop-down for your profile and click **Settings**. Under **Organizations**, you can view the organization you created at sign-up.",134
Configure Enterprise Login,Configure enterprise login for your Choreo organization,"To configure enterprise login for your Choreo organization, follow the steps below:
1. Expand the drop-down for your profile and click **Settings**.
2. Click **Copy Handle** to copy the organization handle to the clipboard.
3. When you add a Choreo organization, Choreo reserves the organization name for your user account. Therefore, you need to create an organization of the same name on the Choreo IdP (i.e., Asgardeo).
    To create your organization on the Choreo IdP, follow these steps:
    1. Sign up to Asgardeo (https://asgardeo.io/signup?utm_source=console) with the same credentials you used to create your Choreo account.
    2. Paste the value copied in step 2 as the organization name in Asgardeo and click **Create**. 
4.  To enable enterprise login for your organization, send us an email as follows:
    - **If you already have a support account with us**, send us the organization name/handle and the email domains specific to your organization through our support portal. 
    - **If you do not have a support account with us yet**, send an email to `choreo-help@wso2.com` requesting to enable enterprise login to your organization. 
        Mention the following information in the request:
        - Organization name or handle. For example, “Stark Industries” or “starkindustries”
        - Email domains specific to your organization. For example, “@stark.com”, “@starkindustries.com”, and “@stark.eu.
        !!!info ""Sample Email""
                    Subject : [Stark Industries] Configure enterprise login
                    Content:
                        Hi CS team,
                        Configure enterprise login to my organization and please find the relevant information below.
                        Organization name/handle: “Stark Industries”/“starkindustries”
                        Email domains specific to my organization: “@stark.com”, “@starkindustries.com”, and “@stark.eu”
                        Thank you!
5. To configure your enterprise login, our support team will send you an email with a verification code. Login to your domain host account and configure the DNS record for your email domain with the following values:
**Name/Host/Alias**                | `@` or leave blank
**Time to Live (TTL)**             | Leave default value or use `86400`
**Value/Answer/Destination**        | wso2-domain-verification:<`verification_code`>

**What's next?**
Next, you can create a connection to the federated identity provider (For example, Auth0, ADFS, Keycloak, etc.), following the steps below:",849
Configure Enterprise Login,Bring your own identity,"Bring your own identity to Choreo by configuring a federated enterprise IdP on Asgardeo to your organization. Now that you have created an organization in Asgardeo with the same name as your Choreo organization, Choreo can authenticate users signing in to that organization. Follow the steps below to configure the federated IdP:
1. Sign in to Asgardeo at https://asgardeo.io/signup?utm_source=console.
2.  To configure a federated enterprise identity provider to your Asgardeo organization, follow the steps in Asgardeo documentation - Add Standard-Based Login (https://wso2.com/asgardeo/docs/guides/authentication/enterprise-login/).
3. Next, navigate to **Develop** and select **Applications** from the left navigation. You will see an application prefixed “WSO2_LOGIN”. 
4. Click on the application and select the **Sign-in Method** tab. You can observe the connection you configured in step 2 of this section.
You are all set! Your users in the enterprise IdP can now log into the Choreo Console using their user credentials.",259
Configure Enterprise Login,Role-based access control for Enterprise login,"Choreo allows you to configure your users residing in an external IDP (Identity Provider) to log in to Choreo with appropriate permissions seamlessly based on their role.
Follow the steps below to configure role-based access control to an enterprise login in Choreo:

### Prerequisites
1. Configure Enterprise Login for your organization (https://wso2.com/choreo/docs/administration/configure-enterprise-login/).
2. Be sure your Enterprise IDP includes the groups/roles attributes in the tokens it sends to Asgardeo in the respective protocol.
3. Be sure you have admin privileges in Choreo.

### Step1: Configure Asgardeo
1. Configure your IDP as an External IDP in Asgardeo (https://wso2.com/asgardeo/docs/guides/authentication/enterprise-login/). Depending on your IDP, you may select OpenID Connect or SAML as the protocol between Asgardeo and your IDP.
    !!! note
        If you are using OpenID Connect, configure the requested scopes accordingly for Asgardeo to get the relevant group/role details from the external IDP.
2. Configure the application as follows:
    1. Go to the Asgardeo Console. Click **Develop** -> **Applications** -> **WSO2_LOGIN_FOR_CHOREO_CONSOLE** and then select **Sign-in Method**. 
    2. Depending on the protocol you selected above, configure your login to use the above IDP. 
        - For OpenID Connect, follow: https://wso2.com/asgardeo/docs/guides/authentication/enterprise-login/add-oidc-idp-login/#enable-the-oidc-idp-for-login
        - For SAML, follow: https://wso2.com/asgardeo/docs/guides/authentication/enterprise-login/add-saml-idp-login/#enable-the-saml-idp-for-login
    3. Go to **User Attributes**  and add the groups attribute to the user attribute list and mark it mandatory.
3. Configure the attribute/scope settings.
    1. Go to the Asgardeo Console. Click **Manage** -> **Scopes** -> **Open ID**.
    2. Click **New Attribute** and add the **Groups** attribute to the list.

### Step 2: Map Asgardeo groups to Choreo Roles in the Choreo Console 
!!! note
    1. This configuration can be done only by the **organization Admin**.
    2. The Choreo organization admin should add the group role mapping entry for the Admin role to enable the external enterprise organization Admin to access this page.
1. Log in to the Choreo console.
2. From the left navigation menu, click **Settings**.
3. Click **Organization** -> **Role Mapping** 
4. To add a new group role mapping, click **Add Mapping**. 
5. Enter the exact `Groups` name configured at the Enterprise IdP and map the list of Choreo roles by selecting the checkbox(s) from the list.
6. Click **Save**. 
!!! note
    1. You can assign one or more roles to each group.
    2. You can only update the role name. The group name is not editable.
    3. If a change in the group role mapping occurs, it will take effect from the next login session onwards. 
    4. If there are no mappings, all the enterprise users will be applied with the default developer role.",867
Customize the Developer Portal Domain,Customize the Developer Portal Domain,"A custom domain for your site is essential for effective branding, discoverability, and credibility. Choreo allows you to configure a custom domain for your organization's developer portal.",35
Customize the Developer Portal Domain,Prerequisites,"1. Sign in to the Choreo Console at https://console.choreo.dev/ using a Google/ GitHub/ Microsoft account.
2. If you are a new user, create an organization. Enter a unique organization name. For example, ""Stark Industries"".
3. Obtain a custom domain through a domain registrar. 
4. Through your DNS administrator, create a `CNAME` type DNS record and associate it with the Choreo Developer Portal custom access domain: `customdns.devportal.choreo.dev`. 
5. Optionally, create TLS certificates and keys to enable TLS for the custom domain. For testing purposes, you can also opt to use the `let's encrypt` option. This option allows Choreo to create and manage the certificates on your behalf.",173
Customize the Developer Portal Domain,Configure a custom domain for your Choreo Developer Portal,"1. Click **Settings** on the left navigation menu. 
2. Click the **Domains** tab and then click on the **Developer Portal** tab. 
3. Click **Add Custom Domain**. 
4. Enter your domain name and click **Verify**. Once Choreo verifies the custom domain successfully, click **Next**.
5. Add the TLS certificates you created for the custom domain and click **Add**. Alternatively, you can click the **Let's Encrypt** option to let Choreo generate and manage the certificates for you. However, we recommend you use **Let's Encrypt** for testing only. 
That's it! You have successfully configured a custom domain for your organization's Choreo Developer Portal.",160
Customize the Developer Portal,Customize the Developer Portal,"The Developer Portal allows API consumers to find and consume APIs with ease. You can change the look and feel of your Developer Portal by changing the theme to match your brand. Doing so will help you give a better developer experience to your users.
To customize the Developer Portal theme, follow the steps given below:
!!! Note
    - To customize the Developer Portal theme for an organization, you need to be an admin user of that organization.
    - You cannot undo a change and restore or revert to a previous version of the theme. However, you can reset it to the default theme.
1. Sign in to the Choreo Console at https://console.choreo.dev/ using a Google, GitHub, or Microsoft account.
2. In the left pane, click **Settings**.
3. In the **API Management** tab, click **Devportal Theme**.
    Once you access the theme, you can customize the **Home** page, color theme, font, header and footer, logos, etc., by expanding the relevant sections.
4. Make a change to the theme. For example, let's change the title on the **Home** page and the color theme. 
    1. To update the title on the **Home** page, expand the **Home Page** section, and in the **Title** field, change the default text (for example, to `Try our APIs!`).
    2. To update the color theme, expand the **Color Palette** section, and change the colors as required (for example, change the background color to `#C3C5CD` and the primary color of the buttons to `#086634`).
    3. Click **Preview** to view a preview of the Developer Portal with the changes you made. Based on the changes given in the examples, the preview appears as follows.   
    4. Click **Save** to save your changes as a draft theme.
    5. To apply the changes to the Developer Portal, toggle the **Go Live** switch. To confirm that you want to go live with the changes, click **Enable** in the message that appears.
    6. If you want to make further changes to the Developer Portal theme after going live with the previous changes, follow the steps given below:
    	1. Make the required changes and click **Save**.
    	2. If you want to apply the latest changes to the Developer Portal, click **Confirm** in the **Proceed to Go Live** message. If not, click **Cancel**.    	
6. Sign in to the Choreo Developer Portal at https://devportal.choreo.dev.
The **Home** page will appear as it did in the preview.",612
Customize the Developer Portal,Reset the Developer Portal theme,"To reset the Developer Portal theme to the default theme, follow the steps given below:
1. Sign in to the Choreo Console at https://console.choreo.dev/ using a Google, GitHub, or Microsoft account.
2. In the left pane, click **Settings**.
2. In the **Organization** tab, click **Devportal Theme**, and then click **Reset to Default**.",91
Configure Developer Portal Self-Sign-Up,Configure Developer Portal Self-Sign-Up,"Choreo allows you to configure self-sign-up to enable users to access your Developer Portal via a self-sign-up page. 
This page walks you through the steps to configure self-sign-up to the Developer Portal.",50
Configure Developer Portal Self-Sign-Up,Prerequisites,"1. Sign in to the Choreo Console at https://console.choreo.dev/ using your Google, GitHub, or Microsoft account.
2. If you are a new user, create an organization with a unique organization name. For example, ""Stark Industries"".",58
Configure Developer Portal Self-Sign-Up,Configure self-sign-up,"1. Click **Settings** in the left navigation menu of the Choreo Console.
2. Click **Copy Handle** to copy the organization handle to the clipboard.
3. Go to the https://asgardeo.io/signup?utm_source=console and register using the same email address/user account you used to sign up with Choreo.
    !!! tip
        You must sign up to Asgardeo with the same email address/user account you used to sign in to Choreo because the organization name is reserved for that user account.
4. In the **Organization Name** field, paste the organization handle that you copied from the **Settings** page in Choreo.
5. Click **Create**. This creates a new organization so that you can proceed to access your workspace. 
6. Send an email similar to the following to choreo-help@wso2.com requesting to configure enterprise IdP for the Developer Portal of your organization. 
    !!! tip
        Be sure you mention the organization name or handle in the request.
    !!! note ""Sample email""
        Subject : [Stark Industries] Configure enterprise IdP for Developer Portal
        Hi CS team,
        I need to configure enterprise IdP for my organization’s Developer Portal to enable self-sign-up. Can you please do the necessary configurations to proceed?
        My organization details are as follows: 
        - Organization name: Stark Industries
        - Organization handle:  starkindustries
        Thank you
    The Choreo support team will perform the necessary configurations and respond to you.
7. On receiving the response, sign in to your Asgardeo account and click **View all applications**.
    You will see an application named **WSO2_LOGIN_FOR_CHOREO_DEV_PORTAL**. 
8. Click on the application to edit it and enter your organization’s Developer Portal URL as the **Access URL** of the application. For example, `https://devportal.choreo.dev/starkindustries`.
9. Click **Update**.
10. To add user attributes, follow these steps:
    1. Click the **User Attributes** tab.
    2. Select user attributes as follows:
        1. To add the email as a mandatory user attribute, expand **Email** and select the **Mandatory** checkbox for it.
        2. To add the first name and the last name as optional, expand **Profile** and select the **Requested** checkbox for the **First Name** and the **Last Name** fields.
    3. Click **Update**.
11. To add the user attributes as OpenID Connect scopes, follow these steps:
    1. In the top navigation menu, click **Manage** and then click **Scopes** in the left navigation menu.
    2. Click **OpenID** and then click **+ New Attribute**.
    3. Select **Email**, **First Name**, and **Last Name** as the attributes to associate with the OpenID scope.
    4. Click **Save** and then click **Save Changes**.
12. To configure basic authentication as the sign-in method, follow these steps:
    1. In the top navigation menu, click **Develop** and then click **WSO2_LOGIN_FOR_CHOREO_DEV_PORTAL** to edit the application details.
    2. Click the **Sign-in Method** tab and then click **Start with default configuration**.
    3. Click **Update**.
13. To configure self-registration, follow these steps:
    1. In the top navigation menu, click **Manage** and then click **Self Registration** in the left navigation menu.
    2. To enable self-registration, turn on the toggle.
    3. Select **Account verification**.
    4. Update the value of the **Account verification link expiry time** depending on your requirement.
    5. Click **Update**. 
Once you complete these steps, the Choreo support team will perform the final self-sign-up configuration, and you will see a sign-up link similar to the following in your Developer Portal: 
Users can click **LOGIN/SIGN UP** and then click **Create an account** to sign up to your Developer Portal without having to send you a request to register them.",1066
Configure Developer Portal Self-Sign-Up,Approve or reject new users,"To manage the users who try to access your Developer Portal via self-sign-up, you can follow either of the following approaches:
- **Enable auto-approval**: This involves automating the user approval process.  When you enable auto-approval, you allow each user who signs up to access your Developer Portal by default.
- **Manually approve/reject**: This allows you to view all the user registrations in a list and approve/reject each registration as required.

### Enable auto-approval for new user registrations
To enable auto-approval and automatically approve each new user account registered to your Developer Portal, follow the steps given below:
1. Click **Settings** in the left navigation menu of the Choreo Console.
2. Click **Self Signups**. 
3. Toggle the **Auto-approval** switch.
Once you enable auto-approval, the users can sign in to your Developer Portal and view your APIs and applications soon after they create an account.

### Manually approve or reject user accounts
If you have not enabled auto-approval, you can manually approve/reject the new user registrations. Once a user creates an account, Choreo sends an email to ask the user to confirm the account. To manually approve/reject user accounts that were confirmed by users, follow the steps given below:
1. Click **Settings** in the left navigation menu of the Choreo Console.
2. Click **Self Signups**. You will see the user accounts listed for approval.
3. If you want to approve a user account, click **Approve** for it. If not, click **Reject**.
    If you approve, the user will receive an email confirming that the user account is approved. 
    If you reject the user account, Choreo sends an email to inform the user that the user account is rejected. Once you reject a user account, that user cannot sign up to your Developer Portal via that account again.",431
Organization,Organization,An organization in Choreo is a logical grouping of users and users' resources. A first-time user can create an organization and be a member of it when signing in to Choreo. Users or resources in one organization cannot access another organization's resources unless an admin of this other organization invites them and adds them as a member of that organization. A user cannot create more than one organization.,80
Organization,Switch organizations,"If you are a member of more than one organization, you can switch from one organization to another. To do this, select the required organization from the **Organization** list in the header bar.",40
Organization,Inviting members,"The organization admin can invite members by assigning them roles in the organization. The invited members receive the invitation as an email notification. By accepting the invitation, the members add themself to the organization. They are then able to access the resources of that organization.",51
Organization,Roles,"Choreo roles are defined as follows:
- **API Publisher**: An API Publisher can discover, create, publish, delete, test, and manage an API.
- **API Subscriber**:  An API Subscriber is a developer in a particular organization. An API subscriber can subscribe to an application, manage subscriptions, manage applications, generate API keys, and manage API keys.
- **Admin**: An admin is responsible for all administration tasks, including IDP creation, user management, customizing the dev portal, managing projects, enabling analytics, managing domains, etc.
- **Billing Admin**:  Is responsible for billing administration that includes viewing tiers, creating and viewing organizations, managing invoices, viewing and creating subscriptions, and viewing and creating payment methods. 
- **Developer**: A Developer focuses on developing components and solutions in Choreo. Developers can create, build, test, and manage any component type in Choreo: API, services, triggers, scheduled jobs, and Webhooks. 
- **Env Manager**: Manages deployment environments. 
- **External API Subscriber**: External API Subscribers are API consumers who have access only to the API Developer Portal. They join an organization with the sole purpose of consuming APIs. ",271
Organization,Theme preference,"An Admin can customize the developer portal via **Theme Preference**. You can customize the logos,  the color palette, the typography, and the footer links. ",36
Connect with Protected Third Party Applications,Connect with Protected Third Party Applications,"When your Choreo component connects with protected third-party applications, the firewalls of these applications might block the requests of the Choreo component. To address this, you can add the following public IP ranges of Choreo that it assigns to Choreo components as client IPs to the allow list:
- 20.22.170.144/28
- 20.22.170.176/28
You need to add these IP ranges to the allow list when you develop components that connect to external databases (e.g., MySQL, MSSQL, PGSQL, Oracle DB, etc.) via connectors (e.g., MySQL DB connector). Doing so allows Choreo to create a secure connection.",151
